{
  "address": "0x90C0BD3406DE4Ba9B2F6aC0fB17b22e0675E7ef6",
  "abi": [
    {
      "inputs": [],
      "name": "ContractCallNotAllowed",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "minAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "receivedAmount",
          "type": "uint256"
        }
      ],
      "name": "CumulativeSlippageTooHigh",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "required",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "balance",
          "type": "uint256"
        }
      ],
      "name": "InsufficientBalance",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidAmount",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidContract",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidReceiver",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NativeAssetTransferFailed",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NoSwapDataProvided",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NoSwapFromZeroBalance",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NoTransferToNullAddress",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NullAddrIsNotAValidSpender",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NullAddrIsNotAnERC20Token",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ReentrancyError",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "SliceOutOfBounds",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "SliceOverflow",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "transactionId",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "integrator",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "referrer",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "fromAssetId",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "toAssetId",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "fromAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "toAmount",
          "type": "uint256"
        }
      ],
      "name": "KanaSwappedGeneric",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "transactionId",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "receivingAssetId",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "KanaTransferCompleted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "components": [
            {
              "internalType": "bytes32",
              "name": "transactionId",
              "type": "bytes32"
            },
            {
              "internalType": "string",
              "name": "bridge",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "integrator",
              "type": "string"
            },
            {
              "internalType": "address",
              "name": "referrer",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "sendingAssetId",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "receiver",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "minAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "destinationChainId",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "hasSourceSwaps",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "hasDestinationCall",
              "type": "bool"
            }
          ],
          "indexed": false,
          "internalType": "struct IKana.BridgeData",
          "name": "bridgeData",
          "type": "tuple"
        }
      ],
      "name": "KanaTransferStarted",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_transactionId",
          "type": "bytes32"
        },
        {
          "internalType": "string",
          "name": "_integrator",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_referrer",
          "type": "string"
        },
        {
          "internalType": "address payable",
          "name": "_receiver",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_minAmount",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "callTo",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "approveTo",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "sendingAssetId",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "receivingAssetId",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "fromAmount",
              "type": "uint256"
            },
            {
              "internalType": "bytes",
              "name": "callData",
              "type": "bytes"
            },
            {
              "internalType": "bool",
              "name": "requiresDeposit",
              "type": "bool"
            }
          ],
          "internalType": "struct LibSwap.SwapData[]",
          "name": "_swapData",
          "type": "tuple[]"
        }
      ],
      "name": "swapTokensGeneric",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    }
  ],
  "transactionHash": "0x59b55ce3542faa5b12eb455e320234919b93de99d1183184509294ee687df680",
  "receipt": {
    "to": null,
    "from": "0xDBE3B915A52e30bd6B28aCbc00c53A399e99e5f7",
    "contractAddress": "0x90C0BD3406DE4Ba9B2F6aC0fB17b22e0675E7ef6",
    "transactionIndex": 0,
    "gasUsed": "100767080",
    "logsBloom": "0x
    "blockHash": "0x9f28ddb1730e7673405359452e54e8f898a4e16cd97b035a526a21f91a6f2ed2",
    "transactionHash": "0x59b55ce3542faa5b12eb455e320234919b93de99d1183184509294ee687df680",
    "logs": [],
    "blockNumber": 174232261,
    "cumulativeGasUsed": "100767080",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 2,
  "solcInputHash": "8bddc76ae40a44f7a5a9a572193e04b2",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"ContractCallNotAllowed\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"minAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"receivedAmount\",\"type\":\"uint256\"}],\"name\":\"CumulativeSlippageTooHigh\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"required\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"name\":\"InsufficientBalance\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidAmount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidContract\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidReceiver\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NativeAssetTransferFailed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NoSwapDataProvided\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NoSwapFromZeroBalance\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NoTransferToNullAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NullAddrIsNotAValidSpender\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NullAddrIsNotAnERC20Token\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ReentrancyError\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SliceOutOfBounds\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SliceOverflow\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"transactionId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"integrator\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"referrer\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"fromAssetId\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"toAssetId\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fromAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"toAmount\",\"type\":\"uint256\"}],\"name\":\"KanaSwappedGeneric\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"transactionId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"receivingAssetId\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"KanaTransferCompleted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"transactionId\",\"type\":\"bytes32\"},{\"internalType\":\"string\",\"name\":\"bridge\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"integrator\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"referrer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"sendingAssetId\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"minAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"destinationChainId\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"hasSourceSwaps\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"hasDestinationCall\",\"type\":\"bool\"}],\"indexed\":false,\"internalType\":\"struct IKana.BridgeData\",\"name\":\"bridgeData\",\"type\":\"tuple\"}],\"name\":\"KanaTransferStarted\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_transactionId\",\"type\":\"bytes32\"},{\"internalType\":\"string\",\"name\":\"_integrator\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_referrer\",\"type\":\"string\"},{\"internalType\":\"address payable\",\"name\":\"_receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_minAmount\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"callTo\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"approveTo\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"sendingAssetId\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"receivingAssetId\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"fromAmount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"callData\",\"type\":\"bytes\"},{\"internalType\":\"bool\",\"name\":\"requiresDeposit\",\"type\":\"bool\"}],\"internalType\":\"struct LibSwap.SwapData[]\",\"name\":\"_swapData\",\"type\":\"tuple[]\"}],\"name\":\"swapTokensGeneric\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"LI.FI (https://li.fi)\",\"details\":\"Uses calldata to execute APPROVED arbitrary methods on DEXs\",\"kind\":\"dev\",\"methods\":{\"swapTokensGeneric(bytes32,string,string,address,uint256,(address,address,address,address,uint256,bytes,bool)[])\":{\"params\":{\"_integrator\":\"the name of the integrator\",\"_minAmount\":\"the minimum amount of the final asset to receive\",\"_receiver\":\"the address to receive the swapped tokens into (also excess tokens)\",\"_referrer\":\"the address of the referrer\",\"_swapData\":\"an object containing swap related data to perform swaps before bridging\",\"_transactionId\":\"the transaction id associated with the operation\"}}},\"title\":\"Generic Swap Facet\",\"version\":1},\"userdoc\":{\"errors\":{\"ReentrancyError()\":[{\"notice\":\"Errors ///\"}]},\"events\":{\"KanaSwappedGeneric(bytes32,string,string,address,address,uint256,uint256)\":{\"notice\":\"Events ///\"},\"KanaTransferStarted((bytes32,string,string,address,address,address,uint256,uint256,bool,bool))\":{\"notice\":\"Events ///\"}},\"kind\":\"user\",\"methods\":{\"swapTokensGeneric(bytes32,string,string,address,uint256,(address,address,address,address,uint256,bytes,bool)[])\":{\"notice\":\"Performs multiple swaps in one transaction\"}},\"notice\":\"Provides functionality for swapping through ANY APPROVED DEX\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/Facets/GenericSwapFacet.sol\":\"GenericSwapFacet\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xf41ca991f30855bf80ffd11e9347856a517b977f0a6c2d52e6421a99b7840329\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/draft-IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x032807210d1d7d218963d7355d62e021a84bf1b3339f4f50be2f63b53cccaf29\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd6153ce99bcdcce22b124f755e72553295be6abcd63804cfdffceb188b8bef10\",\"license\":\"MIT\"},\"src/Errors/GenericErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nerror TokenAddressIsZero();\\nerror TokenNotSupported();\\nerror CannotBridgeToSameNetwork();\\nerror ZeroPostSwapBalance();\\nerror NoSwapDataProvided();\\nerror NativeValueWithERC();\\nerror ContractCallNotAllowed();\\nerror NullAddrIsNotAValidSpender();\\nerror NullAddrIsNotAnERC20Token();\\nerror NoTransferToNullAddress();\\nerror NativeAssetTransferFailed();\\nerror InvalidBridgeConfigLength();\\nerror InvalidAmount();\\nerror InvalidContract();\\nerror InvalidConfig();\\nerror UnsupportedChainId(uint256 chainId);\\nerror InvalidReceiver();\\nerror InvalidDestinationChain();\\nerror InvalidSendingToken();\\nerror InvalidCaller();\\nerror AlreadyInitialized();\\nerror NotInitialized();\\nerror OnlyContractOwner();\\nerror CannotAuthoriseSelf();\\nerror RecoveryAddressCannotBeZero();\\nerror CannotDepositNativeToken();\\nerror InvalidCallData();\\nerror NativeAssetNotSupported();\\nerror UnAuthorized();\\nerror NoSwapFromZeroBalance();\\nerror InvalidFallbackAddress();\\nerror CumulativeSlippageTooHigh(uint256 minAmount, uint256 receivedAmount);\\nerror InsufficientBalance(uint256 required, uint256 balance);\\nerror ZeroAmount();\\nerror InvalidFee();\\nerror InformationMismatch();\\nerror NotAContract();\\nerror NotEnoughBalance(uint256 requested, uint256 available);\\n\",\"keccak256\":\"0xa1f87e75da9cc81da6ec7391d48dbf3f1a5533d96af36d365a8b7cca99bfe527\",\"license\":\"MIT\"},\"src/Facets/GenericSwapFacet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.17;\\n\\nimport { IKana } from \\\"../Interfaces/IKana.sol\\\";\\nimport { LibAsset } from \\\"../Libraries/LibAsset.sol\\\";\\nimport { ReentrancyGuard } from \\\"../Helpers/ReentrancyGuard.sol\\\";\\nimport { SwapperV2, LibSwap } from \\\"../Helpers/SwapperV2.sol\\\";\\nimport { Validatable } from \\\"../Helpers/Validatable.sol\\\";\\nimport { LibUtil } from \\\"../Libraries/LibUtil.sol\\\";\\nimport { InvalidReceiver } from \\\"../Errors/GenericErrors.sol\\\";\\n\\n/// @title Generic Swap Facet\\n/// @author LI.FI (https://li.fi)\\n/// @notice Provides functionality for swapping through ANY APPROVED DEX\\n/// @dev Uses calldata to execute APPROVED arbitrary methods on DEXs\\ncontract GenericSwapFacet is IKana, ReentrancyGuard, SwapperV2, Validatable {\\n    /// Events ///\\n\\n    event KanaSwappedGeneric(\\n        bytes32 indexed transactionId,\\n        string integrator,\\n        string referrer,\\n        address fromAssetId,\\n        address toAssetId,\\n        uint256 fromAmount,\\n        uint256 toAmount\\n    );\\n\\n    /// External Methods ///\\n\\n    /// @notice Performs multiple swaps in one transaction\\n    /// @param _transactionId the transaction id associated with the operation\\n    /// @param _integrator the name of the integrator\\n    /// @param _referrer the address of the referrer\\n    /// @param _receiver the address to receive the swapped tokens into (also excess tokens)\\n    /// @param _minAmount the minimum amount of the final asset to receive\\n    /// @param _swapData an object containing swap related data to perform swaps before bridging\\n    function swapTokensGeneric(\\n        bytes32 _transactionId,\\n        string calldata _integrator,\\n        string calldata _referrer,\\n        address payable _receiver,\\n        uint256 _minAmount,\\n        LibSwap.SwapData[] calldata _swapData\\n    ) external payable refundExcessNative(_receiver) nonReentrant {\\n        if (LibUtil.isZeroAddress(_receiver)) {\\n            revert InvalidReceiver();\\n        }\\n\\n        uint256 postSwapBalance = _depositAndSwap(_transactionId, _minAmount, _swapData, _receiver);\\n        address receivingAssetId = _swapData[_swapData.length - 1].receivingAssetId;\\n        LibAsset.transferAsset(receivingAssetId, _receiver, postSwapBalance);\\n\\n        emit KanaSwappedGeneric(\\n            _transactionId,\\n            _integrator,\\n            _referrer,\\n            _swapData[0].sendingAssetId,\\n            receivingAssetId,\\n            _swapData[0].fromAmount,\\n            postSwapBalance\\n        );\\n    }\\n}\\n\",\"keccak256\":\"0x82d17938721b28290d990a8b3656594529740006bcde9d7ca288948d2abb9ff6\",\"license\":\"MIT\"},\"src/Helpers/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.9;\\n\\n/// @title Reentrancy Guard\\n/// @author LI.FI (https://li.fi)\\n/// @notice Abstract contract to provide protection against reentrancy\\nabstract contract ReentrancyGuard {\\n    /// Storage ///\\n\\n    bytes32 private constant NAMESPACE = keccak256(\\\"com.lifi.reentrancyguard\\\");\\n\\n    /// Types ///\\n\\n    struct ReentrancyStorage {\\n        uint256 status;\\n    }\\n\\n    /// Errors ///\\n\\n    error ReentrancyError();\\n\\n    /// Constants ///\\n\\n    uint256 private constant _NOT_ENTERED = 0;\\n    uint256 private constant _ENTERED = 1;\\n\\n    /// Modifiers ///\\n\\n    modifier nonReentrant() {\\n        ReentrancyStorage storage s = reentrancyStorage();\\n        if (s.status == _ENTERED) revert ReentrancyError();\\n        s.status = _ENTERED;\\n        _;\\n        s.status = _NOT_ENTERED;\\n    }\\n\\n    /// Private Methods ///\\n\\n    /// @dev fetch local storage\\n    function reentrancyStorage() private pure returns (ReentrancyStorage storage data) {\\n        bytes32 position = NAMESPACE;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            data.slot := position\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x16ec4ffd6159dd79e21ca61126a0af1da143403ea541138e1fbff2d4c2cc104f\",\"license\":\"UNLICENSED\"},\"src/Helpers/SwapperV2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport { IKana } from \\\"../Interfaces/IKana.sol\\\";\\nimport { LibSwap } from \\\"../Libraries/LibSwap.sol\\\";\\nimport { LibAsset } from \\\"../Libraries/LibAsset.sol\\\";\\nimport { LibAllowList } from \\\"../Libraries/LibAllowList.sol\\\";\\nimport { InvalidAmount, ContractCallNotAllowed, NoSwapDataProvided, CumulativeSlippageTooHigh } from \\\"../Errors/GenericErrors.sol\\\";\\n\\n/// @title Swapper\\n/// @author LI.FI (https://li.fi)\\n/// @notice Abstract contract to provide swap functionality\\ncontract SwapperV2 is IKana {\\n    /// Types ///\\n\\n    /// @dev only used to get around \\\"Stack Too Deep\\\" errors\\n    struct ReserveData {\\n        bytes32 transactionId;\\n        address payable leftoverReceiver;\\n        uint256 nativeReserve;\\n    }\\n\\n    /// Modifiers ///\\n\\n    /// @dev Sends any leftover balances back to the user\\n    /// @notice Sends any leftover balances to the user\\n    /// @param _swaps Swap data array\\n    /// @param _leftoverReceiver Address to send leftover tokens to\\n    /// @param _initialBalances Array of initial token balances\\n    modifier noLeftovers(\\n        LibSwap.SwapData[] calldata _swaps,\\n        address payable _leftoverReceiver,\\n        uint256[] memory _initialBalances\\n    ) {\\n        uint256 numSwaps = _swaps.length;\\n        if (numSwaps != 1) {\\n            address finalAsset = _swaps[numSwaps - 1].receivingAssetId;\\n            uint256 curBalance;\\n\\n            _;\\n\\n            for (uint256 i = 0; i < numSwaps - 1; ) {\\n                address curAsset = _swaps[i].receivingAssetId;\\n                // Handle multi-to-one swaps\\n                if (curAsset != finalAsset) {\\n                    curBalance = LibAsset.getOwnBalance(curAsset) - _initialBalances[i];\\n                    if (curBalance > 0) {\\n                        LibAsset.transferAsset(curAsset, _leftoverReceiver, curBalance);\\n                    }\\n                }\\n                unchecked {\\n                    ++i;\\n                }\\n            }\\n        } else {\\n            _;\\n        }\\n    }\\n\\n    /// @dev Sends any leftover balances back to the user reserving native tokens\\n    /// @notice Sends any leftover balances to the user\\n    /// @param _swaps Swap data array\\n    /// @param _leftoverReceiver Address to send leftover tokens to\\n    /// @param _initialBalances Array of initial token balances\\n    modifier noLeftoversReserve(\\n        LibSwap.SwapData[] calldata _swaps,\\n        address payable _leftoverReceiver,\\n        uint256[] memory _initialBalances,\\n        uint256 _nativeReserve\\n    ) {\\n        uint256 numSwaps = _swaps.length;\\n        if (numSwaps != 1) {\\n            address finalAsset = _swaps[numSwaps - 1].receivingAssetId;\\n            uint256 curBalance;\\n\\n            _;\\n\\n            for (uint256 i = 0; i < numSwaps - 1; ) {\\n                address curAsset = _swaps[i].receivingAssetId;\\n                // Handle multi-to-one swaps\\n                if (curAsset != finalAsset) {\\n                    curBalance = LibAsset.getOwnBalance(curAsset) - _initialBalances[i];\\n                    uint256 reserve = LibAsset.isNativeAsset(curAsset) ? _nativeReserve : 0;\\n                    if (curBalance > 0) {\\n                        LibAsset.transferAsset(curAsset, _leftoverReceiver, curBalance - reserve);\\n                    }\\n                }\\n                unchecked {\\n                    ++i;\\n                }\\n            }\\n        } else {\\n            _;\\n        }\\n    }\\n\\n    /// @dev Refunds any excess native asset sent to the contract after the main function\\n    /// @notice Refunds any excess native asset sent to the contract after the main function\\n    /// @param _refundReceiver Address to send refunds to\\n    modifier refundExcessNative(address payable _refundReceiver) {\\n        uint256 initialBalance = address(this).balance - msg.value;\\n        _;\\n        uint256 finalBalance = address(this).balance;\\n        uint256 excess = finalBalance > initialBalance ? finalBalance - initialBalance : 0;\\n        if (excess > 0) {\\n            LibAsset.transferAsset(LibAsset.NATIVE_ASSETID, _refundReceiver, excess);\\n        }\\n    }\\n\\n    /// Internal Methods ///\\n\\n    /// @dev Deposits value, executes swaps, and performs minimum amount check\\n    /// @param _transactionId the transaction id associated with the operation\\n    /// @param _minAmount the minimum amount of the final asset to receive\\n    /// @param _swaps Array of data used to execute swaps\\n    /// @param _leftoverReceiver The address to send leftover funds to\\n    /// @return uint256 result of the swap\\n    function _depositAndSwap(\\n        bytes32 _transactionId,\\n        uint256 _minAmount,\\n        LibSwap.SwapData[] calldata _swaps,\\n        address payable _leftoverReceiver\\n    ) internal returns (uint256) {\\n        uint256 numSwaps = _swaps.length;\\n\\n        if (numSwaps == 0) {\\n            revert NoSwapDataProvided();\\n        }\\n\\n        address finalTokenId = _swaps[numSwaps - 1].receivingAssetId;\\n        uint256 initialBalance = LibAsset.getOwnBalance(finalTokenId);\\n\\n        if (LibAsset.isNativeAsset(finalTokenId)) {\\n            initialBalance -= msg.value;\\n        }\\n\\n        uint256[] memory initialBalances = _fetchBalances(_swaps);\\n\\n        LibAsset.depositAssets(_swaps);\\n        _executeSwaps(_transactionId, _swaps, _leftoverReceiver, initialBalances);\\n\\n        uint256 newBalance = LibAsset.getOwnBalance(finalTokenId) - initialBalance;\\n\\n        if (newBalance < _minAmount) {\\n            revert CumulativeSlippageTooHigh(_minAmount, newBalance);\\n        }\\n\\n        return newBalance;\\n    }\\n\\n    /// @dev Deposits value, executes swaps, and performs minimum amount check and reserves native token for fees\\n    /// @param _transactionId the transaction id associated with the operation\\n    /// @param _minAmount the minimum amount of the final asset to receive\\n    /// @param _swaps Array of data used to execute swaps\\n    /// @param _leftoverReceiver The address to send leftover funds to\\n    /// @param _nativeReserve Amount of native token to prevent from being swept back to the caller\\n    function _depositAndSwap(\\n        bytes32 _transactionId,\\n        uint256 _minAmount,\\n        LibSwap.SwapData[] calldata _swaps,\\n        address payable _leftoverReceiver,\\n        uint256 _nativeReserve\\n    ) internal returns (uint256) {\\n        uint256 numSwaps = _swaps.length;\\n\\n        if (numSwaps == 0) {\\n            revert NoSwapDataProvided();\\n        }\\n\\n        address finalTokenId = _swaps[numSwaps - 1].receivingAssetId;\\n        uint256 initialBalance = LibAsset.getOwnBalance(finalTokenId);\\n\\n        if (LibAsset.isNativeAsset(finalTokenId)) {\\n            initialBalance -= msg.value;\\n        }\\n\\n        uint256[] memory initialBalances = _fetchBalances(_swaps);\\n\\n        LibAsset.depositAssets(_swaps);\\n        ReserveData memory rd = ReserveData(_transactionId, _leftoverReceiver, _nativeReserve);\\n        _executeSwaps(rd, _swaps, initialBalances);\\n\\n        uint256 newBalance = LibAsset.getOwnBalance(finalTokenId) - initialBalance;\\n\\n        if (newBalance < _minAmount) {\\n            revert CumulativeSlippageTooHigh(_minAmount, newBalance);\\n        }\\n\\n        return newBalance;\\n    }\\n\\n    /// Private Methods ///\\n\\n    /// @dev Executes swaps and checks that DEXs used are in the allowList\\n    /// @param _transactionId the transaction id associated with the operation\\n    /// @param _swaps Array of data used to execute swaps\\n    /// @param _leftoverReceiver Address to send leftover tokens to\\n    /// @param _initialBalances Array of initial balances\\n    function _executeSwaps(\\n        bytes32 _transactionId,\\n        LibSwap.SwapData[] calldata _swaps,\\n        address payable _leftoverReceiver,\\n        uint256[] memory _initialBalances\\n    ) internal noLeftovers(_swaps, _leftoverReceiver, _initialBalances) {\\n        uint256 numSwaps = _swaps.length;\\n        for (uint256 i = 0; i < numSwaps; ) {\\n            LibSwap.SwapData calldata currentSwap = _swaps[i];\\n\\n            if (\\n                !((LibAsset.isNativeAsset(currentSwap.sendingAssetId) ||\\n                    LibAllowList.contractIsAllowed(currentSwap.approveTo)) &&\\n                    LibAllowList.contractIsAllowed(currentSwap.callTo) &&\\n                    LibAllowList.selectorIsAllowed(bytes4(currentSwap.callData[:4])))\\n            ) revert ContractCallNotAllowed();\\n\\n            LibSwap.swap(_transactionId, currentSwap);\\n\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n    }\\n\\n    /// @dev Executes swaps and checks that DEXs used are in the allowList\\n    /// @param _reserveData Data passed used to reserve native tokens\\n    /// @param _swaps Array of data used to execute swaps\\n    function _executeSwaps(\\n        ReserveData memory _reserveData,\\n        LibSwap.SwapData[] calldata _swaps,\\n        uint256[] memory _initialBalances\\n    ) internal noLeftoversReserve(_swaps, _reserveData.leftoverReceiver, _initialBalances, _reserveData.nativeReserve) {\\n        uint256 numSwaps = _swaps.length;\\n        for (uint256 i = 0; i < numSwaps; ) {\\n            LibSwap.SwapData calldata currentSwap = _swaps[i];\\n\\n            if (\\n                !((LibAsset.isNativeAsset(currentSwap.sendingAssetId) ||\\n                    LibAllowList.contractIsAllowed(currentSwap.approveTo)) &&\\n                    LibAllowList.contractIsAllowed(currentSwap.callTo) &&\\n                    LibAllowList.selectorIsAllowed(bytes4(currentSwap.callData[:4])))\\n            ) revert ContractCallNotAllowed();\\n\\n            LibSwap.swap(_reserveData.transactionId, currentSwap);\\n\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n    }\\n\\n    /// @dev Fetches balances of tokens to be swapped before swapping.\\n    /// @param _swaps Array of data used to execute swaps\\n    /// @return uint256[] Array of token balances.\\n    function _fetchBalances(LibSwap.SwapData[] calldata _swaps) private view returns (uint256[] memory) {\\n        uint256 numSwaps = _swaps.length;\\n        uint256[] memory balances = new uint256[](numSwaps);\\n        address asset;\\n        for (uint256 i = 0; i < numSwaps; ) {\\n            asset = _swaps[i].receivingAssetId;\\n            balances[i] = LibAsset.getOwnBalance(asset);\\n\\n            if (LibAsset.isNativeAsset(asset)) {\\n                balances[i] -= msg.value;\\n            }\\n\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n\\n        return balances;\\n    }\\n}\\n\",\"keccak256\":\"0xcf5f7d2b65373269aec43d4321bc7d3c1a728e9109a156d6091614005f61c1c1\",\"license\":\"MIT\"},\"src/Helpers/Validatable.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.9;\\n\\nimport { LibAsset } from \\\"../Libraries/LibAsset.sol\\\";\\nimport { LibUtil } from \\\"../Libraries/LibUtil.sol\\\";\\nimport { InvalidReceiver, InformationMismatch, InvalidSendingToken, InvalidAmount, NativeAssetNotSupported, InvalidDestinationChain } from \\\"../Errors/GenericErrors.sol\\\";\\nimport { IKana } from \\\"../Interfaces/IKana.sol\\\";\\nimport { LibSwap } from \\\"../Libraries/LibSwap.sol\\\";\\n\\ncontract Validatable {\\n    modifier validateBridgeData(IKana.BridgeData memory _bridgeData) {\\n        if (LibUtil.isZeroAddress(_bridgeData.receiver)) {\\n            revert InvalidReceiver();\\n        }\\n        if (_bridgeData.minAmount == 0) {\\n            revert InvalidAmount();\\n        }\\n        _;\\n    }\\n\\n    modifier noNativeAsset(IKana.BridgeData memory _bridgeData) {\\n        if (LibAsset.isNativeAsset(_bridgeData.sendingAssetId)) {\\n            revert NativeAssetNotSupported();\\n        }\\n        _;\\n    }\\n\\n    modifier onlyAllowSourceToken(IKana.BridgeData memory _bridgeData, address _token) {\\n        if (_bridgeData.sendingAssetId != _token) {\\n            revert InvalidSendingToken();\\n        }\\n        _;\\n    }\\n\\n    modifier onlyAllowDestinationChain(IKana.BridgeData memory _bridgeData, uint256 _chainId) {\\n        if (_bridgeData.destinationChainId != _chainId) {\\n            revert InvalidDestinationChain();\\n        }\\n        _;\\n    }\\n\\n    modifier containsSourceSwaps(IKana.BridgeData memory _bridgeData) {\\n        if (!_bridgeData.hasSourceSwaps) {\\n            revert InformationMismatch();\\n        }\\n        _;\\n    }\\n\\n    modifier doesNotContainSourceSwaps(IKana.BridgeData memory _bridgeData) {\\n        if (_bridgeData.hasSourceSwaps) {\\n            revert InformationMismatch();\\n        }\\n        _;\\n    }\\n\\n    modifier doesNotContainDestinationCalls(IKana.BridgeData memory _bridgeData) {\\n        if (_bridgeData.hasDestinationCall) {\\n            revert InformationMismatch();\\n        }\\n        _;\\n    }\\n}\\n\",\"keccak256\":\"0x278be7d23c02719906f3637de0194e67a32d781f75e102e0442428b17c5fdeda\",\"license\":\"UNLICENSED\"},\"src/Interfaces/IKana.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.9;\\r\\n\\r\\ninterface IKana {\\r\\n    /// Structs ///\\r\\n\\r\\n    struct BridgeData {\\r\\n        bytes32 transactionId;\\r\\n        string bridge;\\r\\n        string integrator;\\r\\n        address referrer;\\r\\n        address sendingAssetId;\\r\\n        address receiver;\\r\\n        uint256 minAmount;\\r\\n        uint256 destinationChainId;\\r\\n        bool hasSourceSwaps;\\r\\n        bool hasDestinationCall;\\r\\n    }\\r\\n\\r\\n    /// Events ///\\r\\n\\r\\n    event KanaTransferStarted(IKana.BridgeData bridgeData);\\r\\n\\r\\n    event KanaTransferCompleted(\\r\\n        bytes32 indexed transactionId,\\r\\n        address receivingAssetId,\\r\\n        address receiver,\\r\\n        uint256 amount,\\r\\n        uint256 timestamp\\r\\n    );\\r\\n}\\r\\n\",\"keccak256\":\"0x6cfe9b225a2b8fae93129bdf699d1bfc56c28fbfecf9e283443aabf84e04fd2f\",\"license\":\"MIT\"},\"src/Libraries/LibAllowList.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport { InvalidContract } from \\\"../Errors/GenericErrors.sol\\\";\\n\\n/// @title Lib Allow List\\n/// @author LI.FI (https://li.fi)\\n/// @notice Library for managing and accessing the conract address allow list\\nlibrary LibAllowList {\\n    /// Storage ///\\n    bytes32 internal constant NAMESPACE = keccak256(\\\"com.kana.library.allow.list\\\");\\n\\n    struct AllowListStorage {\\n        mapping(address => bool) allowlist;\\n        mapping(bytes4 => bool) selectorAllowList;\\n        address[] contracts;\\n    }\\n\\n    /// @dev Adds a contract address to the allow list\\n    /// @param _contract the contract address to add\\n    function addAllowedContract(address _contract) internal {\\n        _checkAddress(_contract);\\n\\n        AllowListStorage storage als = _getStorage();\\n\\n        if (als.allowlist[_contract]) return;\\n\\n        als.allowlist[_contract] = true;\\n        als.contracts.push(_contract);\\n    }\\n\\n    /// @dev Checks whether a contract address has been added to the allow list\\n    /// @param _contract the contract address to check\\n    function contractIsAllowed(address _contract) internal view returns (bool) {\\n        return _getStorage().allowlist[_contract];\\n    }\\n\\n    /// @dev Remove a contract address from the allow list\\n    /// @param _contract the contract address to remove\\n    function removeAllowedContract(address _contract) internal {\\n        AllowListStorage storage als = _getStorage();\\n\\n        if (!als.allowlist[_contract]) {\\n            return;\\n        }\\n\\n        als.allowlist[_contract] = false;\\n\\n        uint256 length = als.contracts.length;\\n        // Find the contract in the list\\n        for (uint256 i = 0; i < length; i++) {\\n            if (als.contracts[i] == _contract) {\\n                // Move the last element into the place to delete\\n                als.contracts[i] = als.contracts[length - 1];\\n                // Remove the last element\\n                als.contracts.pop();\\n                break;\\n            }\\n        }\\n    }\\n\\n    /// @dev Fetch contract addresses from the allow list\\n    function getAllowedContracts() internal view returns (address[] memory) {\\n        return _getStorage().contracts;\\n    }\\n\\n    /// @dev Add a selector to the allow list\\n    /// @param _selector the selector to add\\n    function addAllowedSelector(bytes4 _selector) internal {\\n        _getStorage().selectorAllowList[_selector] = true;\\n    }\\n\\n    /// @dev Removes a selector from the allow list\\n    /// @param _selector the selector to remove\\n    function removeAllowedSelector(bytes4 _selector) internal {\\n        _getStorage().selectorAllowList[_selector] = false;\\n    }\\n\\n    /// @dev Returns if selector has been added to the allow list\\n    /// @param _selector the selector to check\\n    function selectorIsAllowed(bytes4 _selector) internal view returns (bool) {\\n        return _getStorage().selectorAllowList[_selector];\\n    }\\n\\n    /// @dev Fetch local storage struct\\n    function _getStorage() internal pure returns (AllowListStorage storage als) {\\n        bytes32 position = NAMESPACE;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            als.slot := position\\n        }\\n    }\\n\\n    /// @dev Contains business logic for validating a contract address.\\n    /// @param _contract address of the dex to check\\n    function _checkAddress(address _contract) private view {\\n        if (_contract == address(0)) revert InvalidContract();\\n\\n        if (_contract.code.length == 0) revert InvalidContract();\\n    }\\n}\\n\",\"keccak256\":\"0xe080207ac2f0dbfabdaa40a56914b83651e6f3b6d372a86aa736ecc6d13d2822\",\"license\":\"MIT\"},\"src/Libraries/LibAsset.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.9;\\nimport { InsufficientBalance, NullAddrIsNotAnERC20Token, NullAddrIsNotAValidSpender, NoTransferToNullAddress, InvalidAmount, NativeValueWithERC, NativeAssetTransferFailed } from \\\"../Errors/GenericErrors.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport { LibSwap } from \\\"./LibSwap.sol\\\";\\n\\n/// @title LibAsset\\n/// @notice This library contains helpers for dealing with onchain transfers\\n///         of assets, including accounting for the native asset `assetId`\\n///         conventions and any noncompliant ERC20 transfers\\nlibrary LibAsset {\\n    uint256 private constant MAX_UINT = type(uint256).max;\\n\\n    address internal constant NULL_ADDRESS = address(0);\\n\\n    /// @dev All native assets use the empty address for their asset id\\n    ///      by convention\\n\\n    address internal constant NATIVE_ASSETID = NULL_ADDRESS; //address(0)\\n\\n    /// @notice Gets the balance of the inheriting contract for the given asset\\n    /// @param assetId The asset identifier to get the balance of\\n    /// @return Balance held by contracts using this library\\n    function getOwnBalance(address assetId) internal view returns (uint256) {\\n        return assetId == NATIVE_ASSETID ? address(this).balance : IERC20(assetId).balanceOf(address(this));\\n    }\\n\\n    /// @notice Transfers ether from the inheriting contract to a given\\n    ///         recipient\\n    /// @param recipient Address to send ether to\\n    /// @param amount Amount to send to given recipient\\n    function transferNativeAsset(address payable recipient, uint256 amount) private {\\n        if (recipient == NULL_ADDRESS) revert NoTransferToNullAddress();\\n        if (amount > address(this).balance) revert InsufficientBalance(amount, address(this).balance);\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        if (!success) revert NativeAssetTransferFailed();\\n    }\\n\\n    /// @notice If the current allowance is insufficient, the allowance for a given spender\\n    /// is set to MAX_UINT.\\n    /// @param assetId Token address to transfer\\n    /// @param spender Address to give spend approval to\\n    /// @param amount Amount to approve for spending\\n    function maxApproveERC20(\\n        IERC20 assetId,\\n        address spender,\\n        uint256 amount\\n    ) internal {\\n        if (address(assetId) == NATIVE_ASSETID) return;\\n        if (spender == NULL_ADDRESS) revert NullAddrIsNotAValidSpender();\\n        uint256 allowance = assetId.allowance(address(this), spender);\\n\\n        if (allowance < amount) SafeERC20.safeIncreaseAllowance(IERC20(assetId), spender, MAX_UINT - allowance);\\n    }\\n\\n    /// @notice Transfers tokens from the inheriting contract to a given\\n    ///         recipient\\n    /// @param assetId Token address to transfer\\n    /// @param recipient Address to send token to\\n    /// @param amount Amount to send to given recipient\\n    function transferERC20(\\n        address assetId,\\n        address recipient,\\n        uint256 amount\\n    ) private {\\n        if (isNativeAsset(assetId)) revert NullAddrIsNotAnERC20Token();\\n        uint256 assetBalance = IERC20(assetId).balanceOf(address(this));\\n        if (amount > assetBalance) revert InsufficientBalance(amount, assetBalance);\\n        SafeERC20.safeTransfer(IERC20(assetId), recipient, amount);\\n    }\\n\\n    /// @notice Transfers tokens from a sender to a given recipient\\n    /// @param assetId Token address to transfer\\n    /// @param from Address of sender/owner\\n    /// @param to Address of recipient/spender\\n    /// @param amount Amount to transfer from owner to spender\\n    function transferFromERC20(\\n        address assetId,\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal {\\n        if (assetId == NATIVE_ASSETID) revert NullAddrIsNotAnERC20Token();\\n        if (to == NULL_ADDRESS) revert NoTransferToNullAddress();\\n\\n        IERC20 asset = IERC20(assetId);\\n        uint256 prevBalance = asset.balanceOf(to);\\n        SafeERC20.safeTransferFrom(asset, from, to, amount);\\n        if (asset.balanceOf(to) - prevBalance != amount) revert InvalidAmount();\\n    }\\n\\n    function depositAsset(address assetId, uint256 amount) internal {\\n        if (isNativeAsset(assetId)) {\\n            if (msg.value < amount) revert InvalidAmount();\\n        } else {\\n            if (amount == 0) revert InvalidAmount();\\n            uint256 balance = IERC20(assetId).balanceOf(msg.sender);\\n            if (balance < amount) revert InsufficientBalance(amount, balance);\\n            transferFromERC20(assetId, msg.sender, address(this), amount);\\n        }\\n    }\\n\\n    function depositAssets(LibSwap.SwapData[] calldata swaps) internal {\\n        for (uint256 i = 0; i < swaps.length; ) {\\n            LibSwap.SwapData memory swap = swaps[i];\\n            if (swap.requiresDeposit) {\\n                depositAsset(swap.sendingAssetId, swap.fromAmount);\\n            }\\n            unchecked {\\n                i++;\\n            }\\n        }\\n    }\\n\\n    /// @notice Determines whether the given assetId is the native asset\\n    /// @param assetId The asset identifier to evaluate\\n    /// @return Boolean indicating if the asset is the native asset\\n    function isNativeAsset(address assetId) internal pure returns (bool) {\\n        return assetId == NATIVE_ASSETID;\\n    }\\n\\n    /// @notice Wrapper function to transfer a given asset (native or erc20) to\\n    ///         some recipient. Should handle all non-compliant return value\\n    ///         tokens as well by using the SafeERC20 contract by open zeppelin.\\n    /// @param assetId Asset id for transfer (address(0) for native asset,\\n    ///                token address for erc20s)\\n    /// @param recipient Address to send asset to\\n    /// @param amount Amount to send to given recipient\\n    function transferAsset(\\n        address assetId,\\n        address payable recipient,\\n        uint256 amount\\n    ) internal {\\n        (assetId == NATIVE_ASSETID)\\n            ? transferNativeAsset(recipient, amount)\\n            : transferERC20(assetId, recipient, amount);\\n    }\\n\\n    /// @dev Checks whether the given address is a contract and contains code\\n    function isContract(address _contractAddr) internal view returns (bool) {\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            size := extcodesize(_contractAddr)\\n        }\\n        return size > 0;\\n    }\\n}\\n\",\"keccak256\":\"0xec09982016fc50626d0ece6ae8255d577f22245136f61a12c1bc30b03103634b\",\"license\":\"UNLICENSED\"},\"src/Libraries/LibBytes.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nlibrary LibBytes {\\n    // solhint-disable no-inline-assembly\\n\\n    // LibBytes specific errors\\n    error SliceOverflow();\\n    error SliceOutOfBounds();\\n    error AddressOutOfBounds();\\n    error UintOutOfBounds();\\n\\n    // -------------------------\\n\\n    function concat(bytes memory _preBytes, bytes memory _postBytes) internal pure returns (bytes memory) {\\n        bytes memory tempBytes;\\n\\n        assembly {\\n            // Get a location of some free memory and store it in tempBytes as\\n            // Solidity does for memory variables.\\n            tempBytes := mload(0x40)\\n\\n            // Store the length of the first bytes array at the beginning of\\n            // the memory for tempBytes.\\n            let length := mload(_preBytes)\\n            mstore(tempBytes, length)\\n\\n            // Maintain a memory counter for the current write location in the\\n            // temp bytes array by adding the 32 bytes for the array length to\\n            // the starting location.\\n            let mc := add(tempBytes, 0x20)\\n            // Stop copying when the memory counter reaches the length of the\\n            // first bytes array.\\n            let end := add(mc, length)\\n\\n            for {\\n                // Initialize a copy counter to the start of the _preBytes data,\\n                // 32 bytes into its memory.\\n                let cc := add(_preBytes, 0x20)\\n            } lt(mc, end) {\\n                // Increase both counters by 32 bytes each iteration.\\n                mc := add(mc, 0x20)\\n                cc := add(cc, 0x20)\\n            } {\\n                // Write the _preBytes data into the tempBytes memory 32 bytes\\n                // at a time.\\n                mstore(mc, mload(cc))\\n            }\\n\\n            // Add the length of _postBytes to the current length of tempBytes\\n            // and store it as the new length in the first 32 bytes of the\\n            // tempBytes memory.\\n            length := mload(_postBytes)\\n            mstore(tempBytes, add(length, mload(tempBytes)))\\n\\n            // Move the memory counter back from a multiple of 0x20 to the\\n            // actual end of the _preBytes data.\\n            mc := end\\n            // Stop copying when the memory counter reaches the new combined\\n            // length of the arrays.\\n            end := add(mc, length)\\n\\n            for {\\n                let cc := add(_postBytes, 0x20)\\n            } lt(mc, end) {\\n                mc := add(mc, 0x20)\\n                cc := add(cc, 0x20)\\n            } {\\n                mstore(mc, mload(cc))\\n            }\\n\\n            // Update the free-memory pointer by padding our last write location\\n            // to 32 bytes: add 31 bytes to the end of tempBytes to move to the\\n            // next 32 byte block, then round down to the nearest multiple of\\n            // 32. If the sum of the length of the two arrays is zero then add\\n            // one before rounding down to leave a blank 32 bytes (the length block with 0).\\n            mstore(\\n                0x40,\\n                and(\\n                    add(add(end, iszero(add(length, mload(_preBytes)))), 31),\\n                    not(31) // Round down to the nearest 32 bytes.\\n                )\\n            )\\n        }\\n\\n        return tempBytes;\\n    }\\n\\n    function concatStorage(bytes storage _preBytes, bytes memory _postBytes) internal {\\n        assembly {\\n            // Read the first 32 bytes of _preBytes storage, which is the length\\n            // of the array. (We don't need to use the offset into the slot\\n            // because arrays use the entire slot.)\\n            let fslot := sload(_preBytes.slot)\\n            // Arrays of 31 bytes or less have an even value in their slot,\\n            // while longer arrays have an odd value. The actual length is\\n            // the slot divided by two for odd values, and the lowest order\\n            // byte divided by two for even values.\\n            // If the slot is even, bitwise and the slot with 255 and divide by\\n            // two to get the length. If the slot is odd, bitwise and the slot\\n            // with -1 and divide by two.\\n            let slength := div(and(fslot, sub(mul(0x100, iszero(and(fslot, 1))), 1)), 2)\\n            let mlength := mload(_postBytes)\\n            let newlength := add(slength, mlength)\\n            // slength can contain both the length and contents of the array\\n            // if length < 32 bytes so let's prepare for that\\n            // v. http://solidity.readthedocs.io/en/latest/miscellaneous.html#layout-of-state-variables-in-storage\\n            switch add(lt(slength, 32), lt(newlength, 32))\\n            case 2 {\\n                // Since the new array still fits in the slot, we just need to\\n                // update the contents of the slot.\\n                // uint256(bytes_storage) = uint256(bytes_storage) + uint256(bytes_memory) + new_length\\n                sstore(\\n                    _preBytes.slot,\\n                    // all the modifications to the slot are inside this\\n                    // next block\\n                    add(\\n                        // we can just add to the slot contents because the\\n                        // bytes we want to change are the LSBs\\n                        fslot,\\n                        add(\\n                            mul(\\n                                div(\\n                                    // load the bytes from memory\\n                                    mload(add(_postBytes, 0x20)),\\n                                    // zero all bytes to the right\\n                                    exp(0x100, sub(32, mlength))\\n                                ),\\n                                // and now shift left the number of bytes to\\n                                // leave space for the length in the slot\\n                                exp(0x100, sub(32, newlength))\\n                            ),\\n                            // increase length by the double of the memory\\n                            // bytes length\\n                            mul(mlength, 2)\\n                        )\\n                    )\\n                )\\n            }\\n            case 1 {\\n                // The stored value fits in the slot, but the combined value\\n                // will exceed it.\\n                // get the keccak hash to get the contents of the array\\n                mstore(0x0, _preBytes.slot)\\n                let sc := add(keccak256(0x0, 0x20), div(slength, 32))\\n\\n                // save new length\\n                sstore(_preBytes.slot, add(mul(newlength, 2), 1))\\n\\n                // The contents of the _postBytes array start 32 bytes into\\n                // the structure. Our first read should obtain the `submod`\\n                // bytes that can fit into the unused space in the last word\\n                // of the stored array. To get this, we read 32 bytes starting\\n                // from `submod`, so the data we read overlaps with the array\\n                // contents by `submod` bytes. Masking the lowest-order\\n                // `submod` bytes allows us to add that value directly to the\\n                // stored value.\\n\\n                let submod := sub(32, slength)\\n                let mc := add(_postBytes, submod)\\n                let end := add(_postBytes, mlength)\\n                let mask := sub(exp(0x100, submod), 1)\\n\\n                sstore(\\n                    sc,\\n                    add(\\n                        and(fslot, 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00),\\n                        and(mload(mc), mask)\\n                    )\\n                )\\n\\n                for {\\n                    mc := add(mc, 0x20)\\n                    sc := add(sc, 1)\\n                } lt(mc, end) {\\n                    sc := add(sc, 1)\\n                    mc := add(mc, 0x20)\\n                } {\\n                    sstore(sc, mload(mc))\\n                }\\n\\n                mask := exp(0x100, sub(mc, end))\\n\\n                sstore(sc, mul(div(mload(mc), mask), mask))\\n            }\\n            default {\\n                // get the keccak hash to get the contents of the array\\n                mstore(0x0, _preBytes.slot)\\n                // Start copying to the last used word of the stored array.\\n                let sc := add(keccak256(0x0, 0x20), div(slength, 32))\\n\\n                // save new length\\n                sstore(_preBytes.slot, add(mul(newlength, 2), 1))\\n\\n                // Copy over the first `submod` bytes of the new data as in\\n                // case 1 above.\\n                let slengthmod := mod(slength, 32)\\n                let submod := sub(32, slengthmod)\\n                let mc := add(_postBytes, submod)\\n                let end := add(_postBytes, mlength)\\n                let mask := sub(exp(0x100, submod), 1)\\n\\n                sstore(sc, add(sload(sc), and(mload(mc), mask)))\\n\\n                for {\\n                    sc := add(sc, 1)\\n                    mc := add(mc, 0x20)\\n                } lt(mc, end) {\\n                    sc := add(sc, 1)\\n                    mc := add(mc, 0x20)\\n                } {\\n                    sstore(sc, mload(mc))\\n                }\\n\\n                mask := exp(0x100, sub(mc, end))\\n\\n                sstore(sc, mul(div(mload(mc), mask), mask))\\n            }\\n        }\\n    }\\n\\n    function slice(\\n        bytes memory _bytes,\\n        uint256 _start,\\n        uint256 _length\\n    ) internal pure returns (bytes memory) {\\n        if (_length + 31 < _length) revert SliceOverflow();\\n        if (_bytes.length < _start + _length) revert SliceOutOfBounds();\\n\\n        bytes memory tempBytes;\\n\\n        assembly {\\n            switch iszero(_length)\\n            case 0 {\\n                // Get a location of some free memory and store it in tempBytes as\\n                // Solidity does for memory variables.\\n                tempBytes := mload(0x40)\\n\\n                // The first word of the slice result is potentially a partial\\n                // word read from the original array. To read it, we calculate\\n                // the length of that partial word and start copying that many\\n                // bytes into the array. The first word we copy will start with\\n                // data we don't care about, but the last `lengthmod` bytes will\\n                // land at the beginning of the contents of the new array. When\\n                // we're done copying, we overwrite the full first word with\\n                // the actual length of the slice.\\n                let lengthmod := and(_length, 31)\\n\\n                // The multiplication in the next line is necessary\\n                // because when slicing multiples of 32 bytes (lengthmod == 0)\\n                // the following copy loop was copying the origin's length\\n                // and then ending prematurely not copying everything it should.\\n                let mc := add(add(tempBytes, lengthmod), mul(0x20, iszero(lengthmod)))\\n                let end := add(mc, _length)\\n\\n                for {\\n                    // The multiplication in the next line has the same exact purpose\\n                    // as the one above.\\n                    let cc := add(add(add(_bytes, lengthmod), mul(0x20, iszero(lengthmod))), _start)\\n                } lt(mc, end) {\\n                    mc := add(mc, 0x20)\\n                    cc := add(cc, 0x20)\\n                } {\\n                    mstore(mc, mload(cc))\\n                }\\n\\n                mstore(tempBytes, _length)\\n\\n                //update free-memory pointer\\n                //allocating the array padded to 32 bytes like the compiler does now\\n                mstore(0x40, and(add(mc, 31), not(31)))\\n            }\\n            //if we want a zero-length slice let's just return a zero-length array\\n            default {\\n                tempBytes := mload(0x40)\\n                //zero out the 32 bytes slice we are about to return\\n                //we need to do it because Solidity does not garbage collect\\n                mstore(tempBytes, 0)\\n\\n                mstore(0x40, add(tempBytes, 0x20))\\n            }\\n        }\\n\\n        return tempBytes;\\n    }\\n\\n    function toAddress(bytes memory _bytes, uint256 _start) internal pure returns (address) {\\n        if (_bytes.length < _start + 20) {\\n            revert AddressOutOfBounds();\\n        }\\n        address tempAddress;\\n\\n        assembly {\\n            tempAddress := div(mload(add(add(_bytes, 0x20), _start)), 0x1000000000000000000000000)\\n        }\\n\\n        return tempAddress;\\n    }\\n\\n    function toUint8(bytes memory _bytes, uint256 _start) internal pure returns (uint8) {\\n        if (_bytes.length < _start + 1) {\\n            revert UintOutOfBounds();\\n        }\\n        uint8 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0x1), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toUint16(bytes memory _bytes, uint256 _start) internal pure returns (uint16) {\\n        if (_bytes.length < _start + 2) {\\n            revert UintOutOfBounds();\\n        }\\n        uint16 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0x2), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toUint32(bytes memory _bytes, uint256 _start) internal pure returns (uint32) {\\n        if (_bytes.length < _start + 4) {\\n            revert UintOutOfBounds();\\n        }\\n        uint32 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0x4), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toUint64(bytes memory _bytes, uint256 _start) internal pure returns (uint64) {\\n        if (_bytes.length < _start + 8) {\\n            revert UintOutOfBounds();\\n        }\\n        uint64 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0x8), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toUint96(bytes memory _bytes, uint256 _start) internal pure returns (uint96) {\\n        if (_bytes.length < _start + 12) {\\n            revert UintOutOfBounds();\\n        }\\n        uint96 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0xc), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toUint128(bytes memory _bytes, uint256 _start) internal pure returns (uint128) {\\n        if (_bytes.length < _start + 16) {\\n            revert UintOutOfBounds();\\n        }\\n        uint128 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0x10), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toUint256(bytes memory _bytes, uint256 _start) internal pure returns (uint256) {\\n        if (_bytes.length < _start + 32) {\\n            revert UintOutOfBounds();\\n        }\\n        uint256 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0x20), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toBytes32(bytes memory _bytes, uint256 _start) internal pure returns (bytes32) {\\n        if (_bytes.length < _start + 32) {\\n            revert UintOutOfBounds();\\n        }\\n        bytes32 tempBytes32;\\n\\n        assembly {\\n            tempBytes32 := mload(add(add(_bytes, 0x20), _start))\\n        }\\n\\n        return tempBytes32;\\n    }\\n\\n    function equal(bytes memory _preBytes, bytes memory _postBytes) internal pure returns (bool) {\\n        bool success = true;\\n\\n        assembly {\\n            let length := mload(_preBytes)\\n\\n            // if lengths don't match the arrays are not equal\\n            switch eq(length, mload(_postBytes))\\n            case 1 {\\n                // cb is a circuit breaker in the for loop since there's\\n                //  no said feature for inline assembly loops\\n                // cb = 1 - don't breaker\\n                // cb = 0 - break\\n                let cb := 1\\n\\n                let mc := add(_preBytes, 0x20)\\n                let end := add(mc, length)\\n\\n                for {\\n                    let cc := add(_postBytes, 0x20)\\n                    // the next line is the loop condition:\\n                    // while(uint256(mc < end) + cb == 2)\\n                } eq(add(lt(mc, end), cb), 2) {\\n                    mc := add(mc, 0x20)\\n                    cc := add(cc, 0x20)\\n                } {\\n                    // if any of these checks fails then arrays are not equal\\n                    if iszero(eq(mload(mc), mload(cc))) {\\n                        // unsuccess:\\n                        success := 0\\n                        cb := 0\\n                    }\\n                }\\n            }\\n            default {\\n                // unsuccess:\\n                success := 0\\n            }\\n        }\\n\\n        return success;\\n    }\\n\\n    function equalStorage(bytes storage _preBytes, bytes memory _postBytes) internal view returns (bool) {\\n        bool success = true;\\n\\n        assembly {\\n            // we know _preBytes_offset is 0\\n            let fslot := sload(_preBytes.slot)\\n            // Decode the length of the stored array like in concatStorage().\\n            let slength := div(and(fslot, sub(mul(0x100, iszero(and(fslot, 1))), 1)), 2)\\n            let mlength := mload(_postBytes)\\n\\n            // if lengths don't match the arrays are not equal\\n            switch eq(slength, mlength)\\n            case 1 {\\n                // slength can contain both the length and contents of the array\\n                // if length < 32 bytes so let's prepare for that\\n                // v. http://solidity.readthedocs.io/en/latest/miscellaneous.html#layout-of-state-variables-in-storage\\n                if iszero(iszero(slength)) {\\n                    switch lt(slength, 32)\\n                    case 1 {\\n                        // blank the last byte which is the length\\n                        fslot := mul(div(fslot, 0x100), 0x100)\\n\\n                        if iszero(eq(fslot, mload(add(_postBytes, 0x20)))) {\\n                            // unsuccess:\\n                            success := 0\\n                        }\\n                    }\\n                    default {\\n                        // cb is a circuit breaker in the for loop since there's\\n                        //  no said feature for inline assembly loops\\n                        // cb = 1 - don't breaker\\n                        // cb = 0 - break\\n                        let cb := 1\\n\\n                        // get the keccak hash to get the contents of the array\\n                        mstore(0x0, _preBytes.slot)\\n                        let sc := keccak256(0x0, 0x20)\\n\\n                        let mc := add(_postBytes, 0x20)\\n                        let end := add(mc, mlength)\\n\\n                        // the next line is the loop condition:\\n                        // while(uint256(mc < end) + cb == 2)\\n                        // solhint-disable-next-line no-empty-blocks\\n                        for {\\n\\n                        } eq(add(lt(mc, end), cb), 2) {\\n                            sc := add(sc, 1)\\n                            mc := add(mc, 0x20)\\n                        } {\\n                            if iszero(eq(sload(sc), mload(mc))) {\\n                                // unsuccess:\\n                                success := 0\\n                                cb := 0\\n                            }\\n                        }\\n                    }\\n                }\\n            }\\n            default {\\n                // unsuccess:\\n                success := 0\\n            }\\n        }\\n\\n        return success;\\n    }\\n}\\n\",\"keccak256\":\"0x597f5185104f7c91df7404c5b0c60cd2b428280b83603c6144f856dc2ff20016\",\"license\":\"MIT\"},\"src/Libraries/LibSwap.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport { LibAsset } from \\\"./LibAsset.sol\\\";\\nimport { LibUtil } from \\\"./LibUtil.sol\\\";\\nimport { InvalidContract, NoSwapFromZeroBalance, InsufficientBalance } from \\\"../Errors/GenericErrors.sol\\\";\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\nlibrary LibSwap {\\n    struct SwapData {\\n        address callTo;\\n        address approveTo;\\n        address sendingAssetId;\\n        address receivingAssetId;\\n        uint256 fromAmount;\\n        bytes callData;\\n        bool requiresDeposit;\\n    }\\n\\n    event AssetSwapped(\\n        bytes32 transactionId,\\n        address dex,\\n        address fromAssetId,\\n        address toAssetId,\\n        uint256 fromAmount,\\n        uint256 toAmount,\\n        uint256 timestamp\\n    );\\n\\n    function swap(bytes32 transactionId, SwapData calldata _swap) internal {\\n        if (!LibAsset.isContract(_swap.callTo)) revert InvalidContract();\\n        uint256 fromAmount = _swap.fromAmount;\\n        if (fromAmount == 0) revert NoSwapFromZeroBalance();\\n        uint256 nativeValue = LibAsset.isNativeAsset(_swap.sendingAssetId) ? _swap.fromAmount : 0;\\n        uint256 initialSendingAssetBalance = LibAsset.getOwnBalance(_swap.sendingAssetId);\\n        uint256 initialReceivingAssetBalance = LibAsset.getOwnBalance(_swap.receivingAssetId);\\n\\n        if (nativeValue == 0) {\\n            LibAsset.maxApproveERC20(IERC20(_swap.sendingAssetId), _swap.approveTo, _swap.fromAmount);\\n        }\\n\\n        if (initialSendingAssetBalance < _swap.fromAmount) {\\n            revert InsufficientBalance(_swap.fromAmount, initialSendingAssetBalance);\\n        }\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory res) = _swap.callTo.call{ value: nativeValue }(_swap.callData);\\n        if (!success) {\\n            string memory reason = LibUtil.getRevertMsg(res);\\n            revert(reason);\\n        }\\n\\n        uint256 newBalance = LibAsset.getOwnBalance(_swap.receivingAssetId);\\n\\n        emit AssetSwapped(\\n            transactionId,\\n            _swap.callTo,\\n            _swap.sendingAssetId,\\n            _swap.receivingAssetId,\\n            _swap.fromAmount,\\n            newBalance > initialReceivingAssetBalance ? newBalance - initialReceivingAssetBalance : newBalance,\\n            block.timestamp\\n        );\\n    }\\n}\\n\",\"keccak256\":\"0x337c33b582029895a19572e1b2a8803d8170db9dc22d97a04f7a7c07e700f6a4\",\"license\":\"MIT\"},\"src/Libraries/LibUtil.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.9;\\r\\n\\r\\nimport \\\"./LibBytes.sol\\\";\\r\\n\\r\\nlibrary LibUtil {\\r\\n    using LibBytes for bytes;\\r\\n\\r\\n    function getRevertMsg(bytes memory _res) internal pure returns (string memory) {\\r\\n        // If the _res length is less than 68, then the transaction failed silently (without a revert message)\\r\\n        if (_res.length < 68) return \\\"Transaction reverted silently\\\";\\r\\n        bytes memory revertData = _res.slice(4, _res.length - 4); // Remove the selector which is the first 4 bytes\\r\\n        return abi.decode(revertData, (string)); // All that remains is the revert string\\r\\n    }\\r\\n\\r\\n    /// @notice Determines whether the given address is the zero address\\r\\n    /// @param addr The address to verify\\r\\n    /// @return Boolean indicating if the address is the zero address\\r\\n    function isZeroAddress(address addr) internal pure returns (bool) {\\r\\n        return addr == address(0);\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x92a7685bd1ea515757c9e664181b9820e431e87ec2550d62568365c479edb2e3\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50612a73806100206000396000f3fe60806040526004361061001e5760003560e01c80634630a0d814610023575b600080fd5b61003d60048036038101906100389190611db6565b61003f565b005b836000344761004e9190611ed4565b9050600061005a610246565b9050600181600001540361009a576040517f29f745a700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600181600001819055506100ad87610273565b156100e4576040517f1e4ec46b00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60006100f38d8888888c6102ab565b9050600086866001898990506101099190611ed4565b81811061011957610118611f08565b5b905060200281019061012b9190611f46565b606001602081019061013d9190611fac565b905061014a818a846103f4565b8d7ff759b8879b7c58816b62c8cb8572a777bed770ca90e4a5b3bb4c7a8f7e94cf138e8e8e8e8c8c600081811061018457610183611f08565b5b90506020028101906101969190611f46565b60400160208101906101a89190611fac565b878e8e60008181106101bd576101bc611f08565b5b90506020028101906101cf9190611f46565b608001358a6040516101e8989796959493929190612055565b60405180910390a2505060008160000181905550506000479050600082821161021257600061021f565b828261021e9190611ed4565b5b9050600081111561023757610236600085836103f4565b5b50505050505050505050505050565b6000807fa65bb2f450488ab0858c00edc14abc5297769bf42adb48cfb77752890e8b697b90508091505090565b60008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16149050919050565b600080848490509050600081036102ee576040517f0503c3ed00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600085856001846102ff9190611ed4565b81811061030f5761030e611f08565b5b90506020028101906103219190611f46565b60600160208101906103339190611fac565b9050600061034082610448565b905061034b82610505565b1561035f57348161035c9190611ed4565b90505b600061036b888861053d565b9050610377888861065b565b6103848a898989856106cb565b60008261039085610448565b61039a9190611ed4565b9050898110156103e35789816040517f275c273c0000000000000000000000000000000000000000000000000000000081526004016103da9291906120c8565b60405180910390fd5b809550505050505095945050505050565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161461043857610433838383610a5f565b610443565b6104428282610b75565b5b505050565b60008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16146104fc578173ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016104b691906120f1565b602060405180830381865afa1580156104d3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104f79190612121565b6104fe565b475b9050919050565b60008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16149050919050565b6060600083839050905060008167ffffffffffffffff8111156105635761056261214e565b5b6040519080825280602002602001820160405280156105915781602001602082028036833780820191505090505b509050600080600090505b8381101561064e578686828181106105b7576105b6611f08565b5b90506020028101906105c99190611f46565b60600160208101906105db9190611fac565b91506105e682610448565b8382815181106105f9576105f8611f08565b5b60200260200101818152505061060e82610505565b15610643573483828151811061062757610626611f08565b5b6020026020010181815161063b9190611ed4565b915081815250505b80600101905061059c565b5081935050505092915050565b60005b828290508110156106c657600083838381811061067e5761067d611f08565b5b90506020028101906106909190611f46565b61069990612381565b90508060c00151156106b8576106b781604001518260800151610cca565b5b81806001019250505061065e565b505050565b8383838360008484905090506001811461092c57600085856001846106f09190611ed4565b818110610700576106ff611f08565b5b90506020028101906107129190611f46565b60600160208101906107249190611fac565b90506000808b8b9050905060005b8181101561084b57368d8d8381811061074e5761074d611f08565b5b90506020028101906107609190611f46565b905061077d8160400160208101906107789190611fac565b610505565b8061079f575061079e8160200160208101906107999190611fac565b610e28565b5b80156107c257506107c18160000160208101906107bc9190611fac565b610e28565b5b80156107ff57506107fe818060a001906107dc9190612394565b6000906004926107ee93929190612401565b906107f99190612480565b610e87565b5b610835576040517f9453980400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b61083f8f82610ef8565b81600101915050610732565b505060005b60018461085d9190611ed4565b81101561092457600088888381811061087957610878611f08565b5b905060200281019061088b9190611f46565b606001602081019061089d9190611fac565b90508373ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614610918578582815181106108e5576108e4611f08565b5b60200260200101516108f682610448565b6109009190611ed4565b92506000831115610917576109168188856103f4565b5b5b81600101915050610850565b505050610a53565b600089899050905060005b81811015610a5057368b8b8381811061095357610952611f08565b5b90506020028101906109659190611f46565b905061098281604001602081019061097d9190611fac565b610505565b806109a457506109a381602001602081019061099e9190611fac565b610e28565b5b80156109c757506109c68160000160208101906109c19190611fac565b610e28565b5b8015610a045750610a03818060a001906109e19190612394565b6000906004926109f393929190612401565b906109fe9190612480565b610e87565b5b610a3a576040517f9453980400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b610a448d82610ef8565b81600101915050610937565b50505b50505050505050505050565b610a6883610505565b15610a9f576040517fd1bebf0c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60008373ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401610ada91906120f1565b602060405180830381865afa158015610af7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b1b9190612121565b905080821115610b645781816040517fcf479181000000000000000000000000000000000000000000000000000000008152600401610b5b9291906120c8565b60405180910390fd5b610b6f848484611226565b50505050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603610bdb576040517f21f7434500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b47811115610c225780476040517fcf479181000000000000000000000000000000000000000000000000000000008152600401610c199291906120c8565b60405180910390fd5b60008273ffffffffffffffffffffffffffffffffffffffff1682604051610c4890612510565b60006040518083038185875af1925050503d8060008114610c85576040519150601f19603f3d011682016040523d82523d6000602084013e610c8a565b606091505b5050905080610cc5576040517f5a04673700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b505050565b610cd382610505565b15610d175780341015610d12576040517f2c5211c600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b610e24565b60008103610d51576040517f2c5211c600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60008273ffffffffffffffffffffffffffffffffffffffff166370a08231336040518263ffffffff1660e01b8152600401610d8c91906120f1565b602060405180830381865afa158015610da9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610dcd9190612121565b905081811015610e165781816040517fcf479181000000000000000000000000000000000000000000000000000000008152600401610e0d9291906120c8565b60405180910390fd5b610e22833330856112ac565b505b5050565b6000610e326114cc565b60000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff169050919050565b6000610e916114cc565b6001016000837bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916815260200190815260200160002060009054906101000a900460ff169050919050565b610f13816000016020810190610f0e9190611fac565b6114f9565b610f49576040517f6eefed2000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60008160800135905060008103610f8c576040517fe46e079c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000610fa9836040016020810190610fa49190611fac565b610505565b610fb4576000610fba565b82608001355b90506000610fd9846040016020810190610fd49190611fac565b610448565b90506000610ff8856060016020810190610ff39190611fac565b610448565b905060008303611036576110358560400160208101906110189190611fac565b86602001602081019061102b9190611fac565b876080013561150c565b5b8460800135821015611085578460800135826040517fcf47918100000000000000000000000000000000000000000000000000000000815260040161107c9291906120c8565b60405180910390fd5b60008086600001602081019061109b9190611fac565b73ffffffffffffffffffffffffffffffffffffffff1685888060a001906110c29190612394565b6040516110d092919061254a565b60006040518083038185875af1925050503d806000811461110d576040519150601f19603f3d011682016040523d82523d6000602084013e611112565b606091505b5091509150816111665760006111278261166d565b9050806040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161115d91906125d1565b60405180910390fd5b600061118388606001602081019061117e9190611fac565b610448565b90507f7bfdfdb5e3a3776976e53cb0607060f54c5312701c8cba1155cc4d5394440b38898960000160208101906111ba9190611fac565b8a60400160208101906111cd9190611fac565b8b60600160208101906111e09190611fac565b8c608001358987116111f257866111ff565b89876111fe9190611ed4565b5b426040516112139796959493929190612602565b60405180910390a1505050505050505050565b6112a78363a9059cbb60e01b8484604051602401611245929190612671565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506116f9565b505050565b600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1603611312576040517fd1bebf0c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603611378576040517f21f7434500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600084905060008173ffffffffffffffffffffffffffffffffffffffff166370a08231856040518263ffffffff1660e01b81526004016113b891906120f1565b602060405180830381865afa1580156113d5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113f99190612121565b9050611407828686866117c0565b82818373ffffffffffffffffffffffffffffffffffffffff166370a08231876040518263ffffffff1660e01b815260040161144291906120f1565b602060405180830381865afa15801561145f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114839190612121565b61148d9190611ed4565b146114c4576040517f2c5211c600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b505050505050565b6000807fbcebf0a9ab66af8ebd1c7c5806111adc185225ddfcbffe27e46ed5ac66b8904890508091505090565b600080823b905060008111915050919050565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16031561166857600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16036115a7576040517f63ba9bff00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60008373ffffffffffffffffffffffffffffffffffffffff1663dd62ed3e30856040518363ffffffff1660e01b81526004016115e492919061269a565b602060405180830381865afa158015611601573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116259190612121565b905081811015611666576116658484837fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff6116609190611ed4565b611849565b5b505b505050565b60606044825110156116b6576040518060400160405280601d81526020017f5472616e73616374696f6e2072657665727465642073696c656e746c7900000081525090506116f4565b60006116da60048085516116ca9190611ed4565b8561195b9092919063ffffffff16565b9050808060200190518101906116f09190612764565b9150505b919050565b600061175b826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff16611a679092919063ffffffff16565b90506000815111156117bb578080602001905181019061177b91906127c2565b6117ba576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016117b190612861565b60405180910390fd5b5b505050565b611843846323b872dd60e01b8585856040516024016117e193929190612881565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506116f9565b50505050565b6000818473ffffffffffffffffffffffffffffffffffffffff1663dd62ed3e30866040518363ffffffff1660e01b815260040161188792919061269a565b602060405180830381865afa1580156118a4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118c89190612121565b6118d291906128b8565b90506119558463095ea7b360e01b85846040516024016118f3929190612671565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506116f9565b50505050565b606081601f8361196b91906128b8565b10156119a3576040517f47aaf07a00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b81836119af91906128b8565b845110156119e9576040517f3b99b53d00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6060821560008114611a0a5760405191506000825260208201604052611a5b565b6040519150601f8416801560200281840101858101878315602002848b0101015b81831015611a485780518352602083019250602081019050611a2b565b50868552601f19601f8301166040525050505b50809150509392505050565b6060611a768484600085611a7f565b90509392505050565b606082471015611ac4576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611abb9061295e565b60405180910390fd5b611acd85611b93565b611b0c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611b03906129ca565b60405180910390fd5b6000808673ffffffffffffffffffffffffffffffffffffffff168587604051611b359190612a26565b60006040518083038185875af1925050503d8060008114611b72576040519150601f19603f3d011682016040523d82523d6000602084013e611b77565b606091505b5091509150611b87828286611bb6565b92505050949350505050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b60608315611bc657829050611c16565b600083511115611bd95782518084602001fd5b816040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611c0d91906125d1565b60405180910390fd5b9392505050565b6000604051905090565b600080fd5b600080fd5b6000819050919050565b611c4481611c31565b8114611c4f57600080fd5b50565b600081359050611c6181611c3b565b92915050565b600080fd5b600080fd5b600080fd5b60008083601f840112611c8c57611c8b611c67565b5b8235905067ffffffffffffffff811115611ca957611ca8611c6c565b5b602083019150836001820283011115611cc557611cc4611c71565b5b9250929050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000611cf782611ccc565b9050919050565b611d0781611cec565b8114611d1257600080fd5b50565b600081359050611d2481611cfe565b92915050565b6000819050919050565b611d3d81611d2a565b8114611d4857600080fd5b50565b600081359050611d5a81611d34565b92915050565b60008083601f840112611d7657611d75611c67565b5b8235905067ffffffffffffffff811115611d9357611d92611c6c565b5b602083019150836020820283011115611daf57611dae611c71565b5b9250929050565b600080600080600080600080600060c08a8c031215611dd857611dd7611c27565b5b6000611de68c828d01611c52565b99505060208a013567ffffffffffffffff811115611e0757611e06611c2c565b5b611e138c828d01611c76565b985098505060408a013567ffffffffffffffff811115611e3657611e35611c2c565b5b611e428c828d01611c76565b96509650506060611e558c828d01611d15565b9450506080611e668c828d01611d4b565b93505060a08a013567ffffffffffffffff811115611e8757611e86611c2c565b5b611e938c828d01611d60565b92509250509295985092959850929598565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000611edf82611d2a565b9150611eea83611d2a565b9250828203905081811115611f0257611f01611ea5565b5b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600080fd5b600080fd5b600080fd5b60008235600160e003833603038112611f6257611f61611f37565b5b80830191505092915050565b6000611f7982611ccc565b9050919050565b611f8981611f6e565b8114611f9457600080fd5b50565b600081359050611fa681611f80565b92915050565b600060208284031215611fc257611fc1611c27565b5b6000611fd084828501611f97565b91505092915050565b600082825260208201905092915050565b82818337600083830152505050565b6000601f19601f8301169050919050565b60006120168385611fd9565b9350612023838584611fea565b61202c83611ff9565b840190509392505050565b61204081611f6e565b82525050565b61204f81611d2a565b82525050565b600060c0820190508181036000830152612070818a8c61200a565b9050818103602083015261208581888a61200a565b90506120946040830187612037565b6120a16060830186612037565b6120ae6080830185612046565b6120bb60a0830184612046565b9998505050505050505050565b60006040820190506120dd6000830185612046565b6120ea6020830184612046565b9392505050565b60006020820190506121066000830184612037565b92915050565b60008151905061211b81611d34565b92915050565b60006020828403121561213757612136611c27565b5b60006121458482850161210c565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600080fd5b61218b82611ff9565b810181811067ffffffffffffffff821117156121aa576121a961214e565b5b80604052505050565b60006121bd611c1d565b90506121c98282612182565b919050565b600080fd5b600080fd5b600067ffffffffffffffff8211156121f3576121f261214e565b5b6121fc82611ff9565b9050602081019050919050565b600061221c612217846121d8565b6121b3565b905082815260208101848484011115612238576122376121d3565b5b612243848285611fea565b509392505050565b600082601f8301126122605761225f611c67565b5b8135612270848260208601612209565b91505092915050565b60008115159050919050565b61228e81612279565b811461229957600080fd5b50565b6000813590506122ab81612285565b92915050565b600060e082840312156122c7576122c661217d565b5b6122d160e06121b3565b905060006122e184828501611f97565b60008301525060206122f584828501611f97565b602083015250604061230984828501611f97565b604083015250606061231d84828501611f97565b606083015250608061233184828501611d4b565b60808301525060a082013567ffffffffffffffff811115612355576123546121ce565b5b6123618482850161224b565b60a08301525060c06123758482850161229c565b60c08301525092915050565b600061238d36836122b1565b9050919050565b600080833560016020038436030381126123b1576123b0611f37565b5b80840192508235915067ffffffffffffffff8211156123d3576123d2611f3c565b5b6020830192506001820236038313156123ef576123ee611f41565b5b509250929050565b600080fd5b600080fd5b60008085851115612415576124146123f7565b5b83861115612426576124256123fc565b5b6001850283019150848603905094509492505050565b600082905092915050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b600082821b905092915050565b600061248c838361243c565b826124978135612447565b925060048210156124d7576124d27fffffffff0000000000000000000000000000000000000000000000000000000083600403600802612473565b831692505b505092915050565b600081905092915050565b50565b60006124fa6000836124df565b9150612505826124ea565b600082019050919050565b600061251b826124ed565b9150819050919050565b600061253183856124df565b935061253e838584611fea565b82840190509392505050565b6000612557828486612525565b91508190509392505050565b600081519050919050565b60005b8381101561258c578082015181840152602081019050612571565b60008484015250505050565b60006125a382612563565b6125ad8185611fd9565b93506125bd81856020860161256e565b6125c681611ff9565b840191505092915050565b600060208201905081810360008301526125eb8184612598565b905092915050565b6125fc81611c31565b82525050565b600060e082019050612617600083018a6125f3565b6126246020830189612037565b6126316040830188612037565b61263e6060830187612037565b61264b6080830186612046565b61265860a0830185612046565b61266560c0830184612046565b98975050505050505050565b60006040820190506126866000830185612037565b6126936020830184612046565b9392505050565b60006040820190506126af6000830185612037565b6126bc6020830184612037565b9392505050565b600067ffffffffffffffff8211156126de576126dd61214e565b5b6126e782611ff9565b9050602081019050919050565b6000612707612702846126c3565b6121b3565b905082815260208101848484011115612723576127226121d3565b5b61272e84828561256e565b509392505050565b600082601f83011261274b5761274a611c67565b5b815161275b8482602086016126f4565b91505092915050565b60006020828403121561277a57612779611c27565b5b600082015167ffffffffffffffff81111561279857612797611c2c565b5b6127a484828501612736565b91505092915050565b6000815190506127bc81612285565b92915050565b6000602082840312156127d8576127d7611c27565b5b60006127e6848285016127ad565b91505092915050565b7f5361666545524332303a204552433230206f7065726174696f6e20646964206e60008201527f6f74207375636365656400000000000000000000000000000000000000000000602082015250565b600061284b602a83611fd9565b9150612856826127ef565b604082019050919050565b6000602082019050818103600083015261287a8161283e565b9050919050565b60006060820190506128966000830186612037565b6128a36020830185612037565b6128b06040830184612046565b949350505050565b60006128c382611d2a565b91506128ce83611d2a565b92508282019050808211156128e6576128e5611ea5565b5b92915050565b7f416464726573733a20696e73756666696369656e742062616c616e636520666f60008201527f722063616c6c0000000000000000000000000000000000000000000000000000602082015250565b6000612948602683611fd9565b9150612953826128ec565b604082019050919050565b600060208201905081810360008301526129778161293b565b9050919050565b7f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000600082015250565b60006129b4601d83611fd9565b91506129bf8261297e565b602082019050919050565b600060208201905081810360008301526129e3816129a7565b9050919050565b600081519050919050565b6000612a00826129ea565b612a0a81856124df565b9350612a1a81856020860161256e565b80840191505092915050565b6000612a3282846129f5565b91508190509291505056fea264697066735822122087ade63cdb4719930bc87f943e89182f33a9bf33ba1af13de2323e05a03f1f0664736f6c63430008110033",
  "deployedBytecode": "0x60806040526004361061001e5760003560e01c80634630a0d814610023575b600080fd5b61003d60048036038101906100389190611db6565b61003f565b005b836000344761004e9190611ed4565b9050600061005a610246565b9050600181600001540361009a576040517f29f745a700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600181600001819055506100ad87610273565b156100e4576040517f1e4ec46b00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60006100f38d8888888c6102ab565b9050600086866001898990506101099190611ed4565b81811061011957610118611f08565b5b905060200281019061012b9190611f46565b606001602081019061013d9190611fac565b905061014a818a846103f4565b8d7ff759b8879b7c58816b62c8cb8572a777bed770ca90e4a5b3bb4c7a8f7e94cf138e8e8e8e8c8c600081811061018457610183611f08565b5b90506020028101906101969190611f46565b60400160208101906101a89190611fac565b878e8e60008181106101bd576101bc611f08565b5b90506020028101906101cf9190611f46565b608001358a6040516101e8989796959493929190612055565b60405180910390a2505060008160000181905550506000479050600082821161021257600061021f565b828261021e9190611ed4565b5b9050600081111561023757610236600085836103f4565b5b50505050505050505050505050565b6000807fa65bb2f450488ab0858c00edc14abc5297769bf42adb48cfb77752890e8b697b90508091505090565b60008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16149050919050565b600080848490509050600081036102ee576040517f0503c3ed00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600085856001846102ff9190611ed4565b81811061030f5761030e611f08565b5b90506020028101906103219190611f46565b60600160208101906103339190611fac565b9050600061034082610448565b905061034b82610505565b1561035f57348161035c9190611ed4565b90505b600061036b888861053d565b9050610377888861065b565b6103848a898989856106cb565b60008261039085610448565b61039a9190611ed4565b9050898110156103e35789816040517f275c273c0000000000000000000000000000000000000000000000000000000081526004016103da9291906120c8565b60405180910390fd5b809550505050505095945050505050565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161461043857610433838383610a5f565b610443565b6104428282610b75565b5b505050565b60008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16146104fc578173ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016104b691906120f1565b602060405180830381865afa1580156104d3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104f79190612121565b6104fe565b475b9050919050565b60008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16149050919050565b6060600083839050905060008167ffffffffffffffff8111156105635761056261214e565b5b6040519080825280602002602001820160405280156105915781602001602082028036833780820191505090505b509050600080600090505b8381101561064e578686828181106105b7576105b6611f08565b5b90506020028101906105c99190611f46565b60600160208101906105db9190611fac565b91506105e682610448565b8382815181106105f9576105f8611f08565b5b60200260200101818152505061060e82610505565b15610643573483828151811061062757610626611f08565b5b6020026020010181815161063b9190611ed4565b915081815250505b80600101905061059c565b5081935050505092915050565b60005b828290508110156106c657600083838381811061067e5761067d611f08565b5b90506020028101906106909190611f46565b61069990612381565b90508060c00151156106b8576106b781604001518260800151610cca565b5b81806001019250505061065e565b505050565b8383838360008484905090506001811461092c57600085856001846106f09190611ed4565b818110610700576106ff611f08565b5b90506020028101906107129190611f46565b60600160208101906107249190611fac565b90506000808b8b9050905060005b8181101561084b57368d8d8381811061074e5761074d611f08565b5b90506020028101906107609190611f46565b905061077d8160400160208101906107789190611fac565b610505565b8061079f575061079e8160200160208101906107999190611fac565b610e28565b5b80156107c257506107c18160000160208101906107bc9190611fac565b610e28565b5b80156107ff57506107fe818060a001906107dc9190612394565b6000906004926107ee93929190612401565b906107f99190612480565b610e87565b5b610835576040517f9453980400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b61083f8f82610ef8565b81600101915050610732565b505060005b60018461085d9190611ed4565b81101561092457600088888381811061087957610878611f08565b5b905060200281019061088b9190611f46565b606001602081019061089d9190611fac565b90508373ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614610918578582815181106108e5576108e4611f08565b5b60200260200101516108f682610448565b6109009190611ed4565b92506000831115610917576109168188856103f4565b5b5b81600101915050610850565b505050610a53565b600089899050905060005b81811015610a5057368b8b8381811061095357610952611f08565b5b90506020028101906109659190611f46565b905061098281604001602081019061097d9190611fac565b610505565b806109a457506109a381602001602081019061099e9190611fac565b610e28565b5b80156109c757506109c68160000160208101906109c19190611fac565b610e28565b5b8015610a045750610a03818060a001906109e19190612394565b6000906004926109f393929190612401565b906109fe9190612480565b610e87565b5b610a3a576040517f9453980400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b610a448d82610ef8565b81600101915050610937565b50505b50505050505050505050565b610a6883610505565b15610a9f576040517fd1bebf0c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60008373ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401610ada91906120f1565b602060405180830381865afa158015610af7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b1b9190612121565b905080821115610b645781816040517fcf479181000000000000000000000000000000000000000000000000000000008152600401610b5b9291906120c8565b60405180910390fd5b610b6f848484611226565b50505050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603610bdb576040517f21f7434500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b47811115610c225780476040517fcf479181000000000000000000000000000000000000000000000000000000008152600401610c199291906120c8565b60405180910390fd5b60008273ffffffffffffffffffffffffffffffffffffffff1682604051610c4890612510565b60006040518083038185875af1925050503d8060008114610c85576040519150601f19603f3d011682016040523d82523d6000602084013e610c8a565b606091505b5050905080610cc5576040517f5a04673700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b505050565b610cd382610505565b15610d175780341015610d12576040517f2c5211c600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b610e24565b60008103610d51576040517f2c5211c600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60008273ffffffffffffffffffffffffffffffffffffffff166370a08231336040518263ffffffff1660e01b8152600401610d8c91906120f1565b602060405180830381865afa158015610da9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610dcd9190612121565b905081811015610e165781816040517fcf479181000000000000000000000000000000000000000000000000000000008152600401610e0d9291906120c8565b60405180910390fd5b610e22833330856112ac565b505b5050565b6000610e326114cc565b60000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff169050919050565b6000610e916114cc565b6001016000837bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916815260200190815260200160002060009054906101000a900460ff169050919050565b610f13816000016020810190610f0e9190611fac565b6114f9565b610f49576040517f6eefed2000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60008160800135905060008103610f8c576040517fe46e079c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000610fa9836040016020810190610fa49190611fac565b610505565b610fb4576000610fba565b82608001355b90506000610fd9846040016020810190610fd49190611fac565b610448565b90506000610ff8856060016020810190610ff39190611fac565b610448565b905060008303611036576110358560400160208101906110189190611fac565b86602001602081019061102b9190611fac565b876080013561150c565b5b8460800135821015611085578460800135826040517fcf47918100000000000000000000000000000000000000000000000000000000815260040161107c9291906120c8565b60405180910390fd5b60008086600001602081019061109b9190611fac565b73ffffffffffffffffffffffffffffffffffffffff1685888060a001906110c29190612394565b6040516110d092919061254a565b60006040518083038185875af1925050503d806000811461110d576040519150601f19603f3d011682016040523d82523d6000602084013e611112565b606091505b5091509150816111665760006111278261166d565b9050806040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161115d91906125d1565b60405180910390fd5b600061118388606001602081019061117e9190611fac565b610448565b90507f7bfdfdb5e3a3776976e53cb0607060f54c5312701c8cba1155cc4d5394440b38898960000160208101906111ba9190611fac565b8a60400160208101906111cd9190611fac565b8b60600160208101906111e09190611fac565b8c608001358987116111f257866111ff565b89876111fe9190611ed4565b5b426040516112139796959493929190612602565b60405180910390a1505050505050505050565b6112a78363a9059cbb60e01b8484604051602401611245929190612671565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506116f9565b505050565b600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1603611312576040517fd1bebf0c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603611378576040517f21f7434500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600084905060008173ffffffffffffffffffffffffffffffffffffffff166370a08231856040518263ffffffff1660e01b81526004016113b891906120f1565b602060405180830381865afa1580156113d5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113f99190612121565b9050611407828686866117c0565b82818373ffffffffffffffffffffffffffffffffffffffff166370a08231876040518263ffffffff1660e01b815260040161144291906120f1565b602060405180830381865afa15801561145f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114839190612121565b61148d9190611ed4565b146114c4576040517f2c5211c600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b505050505050565b6000807fbcebf0a9ab66af8ebd1c7c5806111adc185225ddfcbffe27e46ed5ac66b8904890508091505090565b600080823b905060008111915050919050565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16031561166857600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16036115a7576040517f63ba9bff00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60008373ffffffffffffffffffffffffffffffffffffffff1663dd62ed3e30856040518363ffffffff1660e01b81526004016115e492919061269a565b602060405180830381865afa158015611601573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116259190612121565b905081811015611666576116658484837fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff6116609190611ed4565b611849565b5b505b505050565b60606044825110156116b6576040518060400160405280601d81526020017f5472616e73616374696f6e2072657665727465642073696c656e746c7900000081525090506116f4565b60006116da60048085516116ca9190611ed4565b8561195b9092919063ffffffff16565b9050808060200190518101906116f09190612764565b9150505b919050565b600061175b826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff16611a679092919063ffffffff16565b90506000815111156117bb578080602001905181019061177b91906127c2565b6117ba576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016117b190612861565b60405180910390fd5b5b505050565b611843846323b872dd60e01b8585856040516024016117e193929190612881565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506116f9565b50505050565b6000818473ffffffffffffffffffffffffffffffffffffffff1663dd62ed3e30866040518363ffffffff1660e01b815260040161188792919061269a565b602060405180830381865afa1580156118a4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118c89190612121565b6118d291906128b8565b90506119558463095ea7b360e01b85846040516024016118f3929190612671565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506116f9565b50505050565b606081601f8361196b91906128b8565b10156119a3576040517f47aaf07a00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b81836119af91906128b8565b845110156119e9576040517f3b99b53d00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6060821560008114611a0a5760405191506000825260208201604052611a5b565b6040519150601f8416801560200281840101858101878315602002848b0101015b81831015611a485780518352602083019250602081019050611a2b565b50868552601f19601f8301166040525050505b50809150509392505050565b6060611a768484600085611a7f565b90509392505050565b606082471015611ac4576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611abb9061295e565b60405180910390fd5b611acd85611b93565b611b0c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611b03906129ca565b60405180910390fd5b6000808673ffffffffffffffffffffffffffffffffffffffff168587604051611b359190612a26565b60006040518083038185875af1925050503d8060008114611b72576040519150601f19603f3d011682016040523d82523d6000602084013e611b77565b606091505b5091509150611b87828286611bb6565b92505050949350505050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b60608315611bc657829050611c16565b600083511115611bd95782518084602001fd5b816040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611c0d91906125d1565b60405180910390fd5b9392505050565b6000604051905090565b600080fd5b600080fd5b6000819050919050565b611c4481611c31565b8114611c4f57600080fd5b50565b600081359050611c6181611c3b565b92915050565b600080fd5b600080fd5b600080fd5b60008083601f840112611c8c57611c8b611c67565b5b8235905067ffffffffffffffff811115611ca957611ca8611c6c565b5b602083019150836001820283011115611cc557611cc4611c71565b5b9250929050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000611cf782611ccc565b9050919050565b611d0781611cec565b8114611d1257600080fd5b50565b600081359050611d2481611cfe565b92915050565b6000819050919050565b611d3d81611d2a565b8114611d4857600080fd5b50565b600081359050611d5a81611d34565b92915050565b60008083601f840112611d7657611d75611c67565b5b8235905067ffffffffffffffff811115611d9357611d92611c6c565b5b602083019150836020820283011115611daf57611dae611c71565b5b9250929050565b600080600080600080600080600060c08a8c031215611dd857611dd7611c27565b5b6000611de68c828d01611c52565b99505060208a013567ffffffffffffffff811115611e0757611e06611c2c565b5b611e138c828d01611c76565b985098505060408a013567ffffffffffffffff811115611e3657611e35611c2c565b5b611e428c828d01611c76565b96509650506060611e558c828d01611d15565b9450506080611e668c828d01611d4b565b93505060a08a013567ffffffffffffffff811115611e8757611e86611c2c565b5b611e938c828d01611d60565b92509250509295985092959850929598565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000611edf82611d2a565b9150611eea83611d2a565b9250828203905081811115611f0257611f01611ea5565b5b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600080fd5b600080fd5b600080fd5b60008235600160e003833603038112611f6257611f61611f37565b5b80830191505092915050565b6000611f7982611ccc565b9050919050565b611f8981611f6e565b8114611f9457600080fd5b50565b600081359050611fa681611f80565b92915050565b600060208284031215611fc257611fc1611c27565b5b6000611fd084828501611f97565b91505092915050565b600082825260208201905092915050565b82818337600083830152505050565b6000601f19601f8301169050919050565b60006120168385611fd9565b9350612023838584611fea565b61202c83611ff9565b840190509392505050565b61204081611f6e565b82525050565b61204f81611d2a565b82525050565b600060c0820190508181036000830152612070818a8c61200a565b9050818103602083015261208581888a61200a565b90506120946040830187612037565b6120a16060830186612037565b6120ae6080830185612046565b6120bb60a0830184612046565b9998505050505050505050565b60006040820190506120dd6000830185612046565b6120ea6020830184612046565b9392505050565b60006020820190506121066000830184612037565b92915050565b60008151905061211b81611d34565b92915050565b60006020828403121561213757612136611c27565b5b60006121458482850161210c565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600080fd5b61218b82611ff9565b810181811067ffffffffffffffff821117156121aa576121a961214e565b5b80604052505050565b60006121bd611c1d565b90506121c98282612182565b919050565b600080fd5b600080fd5b600067ffffffffffffffff8211156121f3576121f261214e565b5b6121fc82611ff9565b9050602081019050919050565b600061221c612217846121d8565b6121b3565b905082815260208101848484011115612238576122376121d3565b5b612243848285611fea565b509392505050565b600082601f8301126122605761225f611c67565b5b8135612270848260208601612209565b91505092915050565b60008115159050919050565b61228e81612279565b811461229957600080fd5b50565b6000813590506122ab81612285565b92915050565b600060e082840312156122c7576122c661217d565b5b6122d160e06121b3565b905060006122e184828501611f97565b60008301525060206122f584828501611f97565b602083015250604061230984828501611f97565b604083015250606061231d84828501611f97565b606083015250608061233184828501611d4b565b60808301525060a082013567ffffffffffffffff811115612355576123546121ce565b5b6123618482850161224b565b60a08301525060c06123758482850161229c565b60c08301525092915050565b600061238d36836122b1565b9050919050565b600080833560016020038436030381126123b1576123b0611f37565b5b80840192508235915067ffffffffffffffff8211156123d3576123d2611f3c565b5b6020830192506001820236038313156123ef576123ee611f41565b5b509250929050565b600080fd5b600080fd5b60008085851115612415576124146123f7565b5b83861115612426576124256123fc565b5b6001850283019150848603905094509492505050565b600082905092915050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b600082821b905092915050565b600061248c838361243c565b826124978135612447565b925060048210156124d7576124d27fffffffff0000000000000000000000000000000000000000000000000000000083600403600802612473565b831692505b505092915050565b600081905092915050565b50565b60006124fa6000836124df565b9150612505826124ea565b600082019050919050565b600061251b826124ed565b9150819050919050565b600061253183856124df565b935061253e838584611fea565b82840190509392505050565b6000612557828486612525565b91508190509392505050565b600081519050919050565b60005b8381101561258c578082015181840152602081019050612571565b60008484015250505050565b60006125a382612563565b6125ad8185611fd9565b93506125bd81856020860161256e565b6125c681611ff9565b840191505092915050565b600060208201905081810360008301526125eb8184612598565b905092915050565b6125fc81611c31565b82525050565b600060e082019050612617600083018a6125f3565b6126246020830189612037565b6126316040830188612037565b61263e6060830187612037565b61264b6080830186612046565b61265860a0830185612046565b61266560c0830184612046565b98975050505050505050565b60006040820190506126866000830185612037565b6126936020830184612046565b9392505050565b60006040820190506126af6000830185612037565b6126bc6020830184612037565b9392505050565b600067ffffffffffffffff8211156126de576126dd61214e565b5b6126e782611ff9565b9050602081019050919050565b6000612707612702846126c3565b6121b3565b905082815260208101848484011115612723576127226121d3565b5b61272e84828561256e565b509392505050565b600082601f83011261274b5761274a611c67565b5b815161275b8482602086016126f4565b91505092915050565b60006020828403121561277a57612779611c27565b5b600082015167ffffffffffffffff81111561279857612797611c2c565b5b6127a484828501612736565b91505092915050565b6000815190506127bc81612285565b92915050565b6000602082840312156127d8576127d7611c27565b5b60006127e6848285016127ad565b91505092915050565b7f5361666545524332303a204552433230206f7065726174696f6e20646964206e60008201527f6f74207375636365656400000000000000000000000000000000000000000000602082015250565b600061284b602a83611fd9565b9150612856826127ef565b604082019050919050565b6000602082019050818103600083015261287a8161283e565b9050919050565b60006060820190506128966000830186612037565b6128a36020830185612037565b6128b06040830184612046565b949350505050565b60006128c382611d2a565b91506128ce83611d2a565b92508282019050808211156128e6576128e5611ea5565b5b92915050565b7f416464726573733a20696e73756666696369656e742062616c616e636520666f60008201527f722063616c6c0000000000000000000000000000000000000000000000000000602082015250565b6000612948602683611fd9565b9150612953826128ec565b604082019050919050565b600060208201905081810360008301526129778161293b565b9050919050565b7f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000600082015250565b60006129b4601d83611fd9565b91506129bf8261297e565b602082019050919050565b600060208201905081810360008301526129e3816129a7565b9050919050565b600081519050919050565b6000612a00826129ea565b612a0a81856124df565b9350612a1a81856020860161256e565b80840191505092915050565b6000612a3282846129f5565b91508190509291505056fea264697066735822122087ade63cdb4719930bc87f943e89182f33a9bf33ba1af13de2323e05a03f1f0664736f6c63430008110033",
  "devdoc": {
    "author": "LI.FI (https://li.fi)",
    "details": "Uses calldata to execute APPROVED arbitrary methods on DEXs",
    "kind": "dev",
    "methods": {
      "swapTokensGeneric(bytes32,string,string,address,uint256,(address,address,address,address,uint256,bytes,bool)[])": {
        "params": {
          "_integrator": "the name of the integrator",
          "_minAmount": "the minimum amount of the final asset to receive",
          "_receiver": "the address to receive the swapped tokens into (also excess tokens)",
          "_referrer": "the address of the referrer",
          "_swapData": "an object containing swap related data to perform swaps before bridging",
          "_transactionId": "the transaction id associated with the operation"
        }
      }
    },
    "title": "Generic Swap Facet",
    "version": 1
  },
  "userdoc": {
    "errors": {
      "ReentrancyError()": [
        {
          "notice": "Errors ///"
        }
      ]
    },
    "events": {
      "KanaSwappedGeneric(bytes32,string,string,address,address,uint256,uint256)": {
        "notice": "Events ///"
      },
      "KanaTransferStarted((bytes32,string,string,address,address,address,uint256,uint256,bool,bool))": {
        "notice": "Events ///"
      }
    },
    "kind": "user",
    "methods": {
      "swapTokensGeneric(bytes32,string,string,address,uint256,(address,address,address,address,uint256,bytes,bool)[])": {
        "notice": "Performs multiple swaps in one transaction"
      }
    },
    "notice": "Provides functionality for swapping through ANY APPROVED DEX",
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}