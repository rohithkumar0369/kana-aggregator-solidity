{
  "address": "0x89E3223d3348284A5c28e82386a03B7c87319240",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_contractOwner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_diamondCutFacet",
          "type": "address"
        }
      ],
      "stateMutability": "payable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "CalldataEmptyButInitNotZero",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "FacetAddressIsNotZero",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "FacetAddressIsZero",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "FacetContainsNoCode",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "FunctionAlreadyExists",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "FunctionDoesNotExist",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "FunctionIsImmutable",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "IncorrectFacetCutAction",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InitReverted",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InitZeroButCalldataNotEmpty",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NoSelectorsInFace",
      "type": "error"
    },
    {
      "stateMutability": "payable",
      "type": "fallback"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0xf4480d76a284aad42935f0b2b5154172baa3df762a6eeb00dabbbe20b7640928",
  "receipt": {
    "to": null,
    "from": "0xDBE3B915A52e30bd6B28aCbc00c53A399e99e5f7",
    "contractAddress": "0x89E3223d3348284A5c28e82386a03B7c87319240",
    "transactionIndex": 0,
    "gasUsed": "73990000",
    "logsBloom": "0x
    "blockHash": "0x3b6265e8ea4de09d2e92d80af98d35471cc061afad5c26732ae89217a8449847",
    "transactionHash": "0xf4480d76a284aad42935f0b2b5154172baa3df762a6eeb00dabbbe20b7640928",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 173926206,
        "transactionHash": "0xf4480d76a284aad42935f0b2b5154172baa3df762a6eeb00dabbbe20b7640928",
        "address": "0x89E3223d3348284A5c28e82386a03B7c87319240",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000dbe3b915a52e30bd6b28acbc00c53a399e99e5f7"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x3b6265e8ea4de09d2e92d80af98d35471cc061afad5c26732ae89217a8449847"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 173926206,
        "transactionHash": "0xf4480d76a284aad42935f0b2b5154172baa3df762a6eeb00dabbbe20b7640928",
        "address": "0x89E3223d3348284A5c28e82386a03B7c87319240",
        "topics": [
          "0x8faa70878671ccd212d20771b795c50af8fd3ff6cf27f4bde57e5d4de0aeb673"
        ],
        "data": "0x00000000000000000000000000000000000000000000000000000000000000600000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000014000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000020000000000000000000000000b5032737b316590c8948ab6043cfdf56d27435500000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000011f931c1c000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
        "logIndex": 1,
        "blockHash": "0x3b6265e8ea4de09d2e92d80af98d35471cc061afad5c26732ae89217a8449847"
      }
    ],
    "blockNumber": 173926206,
    "cumulativeGasUsed": "73990000",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xDBE3B915A52e30bd6B28aCbc00c53A399e99e5f7",
    "0xB5032737B316590c8948AB6043CFDF56D2743550"
  ],
  "numDeployments": 1,
  "solcInputHash": "0d5b242226750af9ef071c28cf5286bc",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_contractOwner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_diamondCutFacet\",\"type\":\"address\"}],\"stateMutability\":\"payable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"CalldataEmptyButInitNotZero\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"FacetAddressIsNotZero\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"FacetAddressIsZero\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"FacetContainsNoCode\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"FunctionAlreadyExists\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"FunctionDoesNotExist\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"FunctionIsImmutable\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"IncorrectFacetCutAction\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InitReverted\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InitZeroButCalldataNotEmpty\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NoSelectorsInFace\",\"type\":\"error\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/KanaDiamond.sol\":\"KanaDiamond\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"src/Errors/GenericErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nerror TokenAddressIsZero();\\nerror TokenNotSupported();\\nerror CannotBridgeToSameNetwork();\\nerror ZeroPostSwapBalance();\\nerror NoSwapDataProvided();\\nerror NativeValueWithERC();\\nerror ContractCallNotAllowed();\\nerror NullAddrIsNotAValidSpender();\\nerror NullAddrIsNotAnERC20Token();\\nerror NoTransferToNullAddress();\\nerror NativeAssetTransferFailed();\\nerror InvalidBridgeConfigLength();\\nerror InvalidAmount();\\nerror InvalidContract();\\nerror InvalidConfig();\\nerror UnsupportedChainId(uint256 chainId);\\nerror InvalidReceiver();\\nerror InvalidDestinationChain();\\nerror InvalidSendingToken();\\nerror InvalidCaller();\\nerror AlreadyInitialized();\\nerror NotInitialized();\\nerror OnlyContractOwner();\\nerror CannotAuthoriseSelf();\\nerror RecoveryAddressCannotBeZero();\\nerror CannotDepositNativeToken();\\nerror InvalidCallData();\\nerror NativeAssetNotSupported();\\nerror UnAuthorized();\\nerror NoSwapFromZeroBalance();\\nerror InvalidFallbackAddress();\\nerror CumulativeSlippageTooHigh(uint256 minAmount, uint256 receivedAmount);\\nerror InsufficientBalance(uint256 required, uint256 balance);\\nerror ZeroAmount();\\nerror InvalidFee();\\nerror InformationMismatch();\\nerror NotAContract();\\nerror NotEnoughBalance(uint256 requested, uint256 available);\\n\",\"keccak256\":\"0xa1f87e75da9cc81da6ec7391d48dbf3f1a5533d96af36d365a8b7cca99bfe527\",\"license\":\"MIT\"},\"src/Interfaces/IDiamondCut.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\ninterface IDiamondCut {\\n    enum FacetCutAction {\\n        Add,\\n        Replace,\\n        Remove\\n    }\\n    // Add=0, Replace=1, Remove=2\\n\\n    struct FacetCut {\\n        address facetAddress;\\n        FacetCutAction action;\\n        bytes4[] functionSelectors;\\n    }\\n\\n    /// @notice Add/replace/remove any number of functions and optionally execute\\n    ///         a function with delegatecall\\n    /// @param _diamondCut Contains the facet addresses and function selectors\\n    /// @param _init The address of the contract or facet to execute _calldata\\n    /// @param _calldata A function call, including function selector and arguments\\n    ///                  _calldata is executed with delegatecall on _init\\n    function diamondCut(\\n        FacetCut[] calldata _diamondCut,\\n        address _init,\\n        bytes calldata _calldata\\n    ) external;\\n\\n    event DiamondCut(FacetCut[] _diamondCut, address _init, bytes _calldata);\\n}\\n\",\"keccak256\":\"0xd61a0567c547ca7b191f1ac8884f172622a06de03b51465dccd83795600a5fb1\",\"license\":\"MIT\"},\"src/KanaDiamond.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\r\\npragma solidity ^0.8.9;\\r\\n\\r\\nimport { LibDiamond } from \\\"./Libraries/LibDiamond.sol\\\";\\r\\nimport { IDiamondCut } from \\\"./Interfaces/IDiamondCut.sol\\\";\\r\\nimport { LibUtil } from \\\"./Libraries/LibUtil.sol\\\";\\r\\n\\r\\ncontract KanaDiamond{\\r\\n        constructor(address _contractOwner, address _diamondCutFacet) payable {\\r\\n        LibDiamond.setContractOwner(_contractOwner);\\r\\n\\r\\n        // Add the diamondCut external function from the diamondCutFacet\\r\\n        IDiamondCut.FacetCut[] memory cut = new IDiamondCut.FacetCut[](1);\\r\\n        bytes4[] memory functionSelectors = new bytes4[](1);\\r\\n        functionSelectors[0] = IDiamondCut.diamondCut.selector;\\r\\n        cut[0] = IDiamondCut.FacetCut({\\r\\n            facetAddress: _diamondCutFacet,\\r\\n            action: IDiamondCut.FacetCutAction.Add,\\r\\n            functionSelectors: functionSelectors\\r\\n        });\\r\\n        LibDiamond.diamondCut(cut, address(0), \\\"\\\");\\r\\n    }\\r\\n\\r\\n    // Find facet for function that is called and execute the\\r\\n    // function if a facet is found and return any value.\\r\\n    // solhint-disable-next-line no-complex-fallback\\r\\n    fallback() external payable {\\r\\n        LibDiamond.DiamondStorage storage ds;\\r\\n        bytes32 position = LibDiamond.DIAMOND_STORAGE_POSITION;\\r\\n\\r\\n        // get diamond storage\\r\\n        // solhint-disable-next-line no-inline-assembly\\r\\n        assembly {\\r\\n            ds.slot := position\\r\\n        }\\r\\n\\r\\n        // get facet from function selector\\r\\n        address facet = ds.selectorToFacetAndPosition[msg.sig].facetAddress;\\r\\n\\r\\n        if (facet == address(0)) {\\r\\n            revert LibDiamond.FunctionDoesNotExist();\\r\\n        }\\r\\n\\r\\n        // Execute external function from facet using delegatecall and return any value.\\r\\n        // solhint-disable-next-line no-inline-assembly\\r\\n        assembly {\\r\\n            // copy function selector and any arguments\\r\\n            calldatacopy(0, 0, calldatasize())\\r\\n            // execute function call using the facet\\r\\n            let result := delegatecall(gas(), facet, 0, calldatasize(), 0, 0)\\r\\n            // get any return value\\r\\n            returndatacopy(0, 0, returndatasize())\\r\\n            // return any return value or error back to the caller\\r\\n            switch result\\r\\n            case 0 {\\r\\n                revert(0, returndatasize())\\r\\n            }\\r\\n            default {\\r\\n                return(0, returndatasize())\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    // Able to receive ether\\r\\n    // solhint-disable-next-line no-empty-blocks\\r\\n    receive() external payable {}\\r\\n}\",\"keccak256\":\"0x4eab3b4e1c3e0d7a78a6407ea50d10ce1d5496fbb3286c90e84445a461a84409\",\"license\":\"UNLICENSED\"},\"src/Libraries/LibBytes.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nlibrary LibBytes {\\n    // solhint-disable no-inline-assembly\\n\\n    // LibBytes specific errors\\n    error SliceOverflow();\\n    error SliceOutOfBounds();\\n    error AddressOutOfBounds();\\n    error UintOutOfBounds();\\n\\n    // -------------------------\\n\\n    function concat(bytes memory _preBytes, bytes memory _postBytes) internal pure returns (bytes memory) {\\n        bytes memory tempBytes;\\n\\n        assembly {\\n            // Get a location of some free memory and store it in tempBytes as\\n            // Solidity does for memory variables.\\n            tempBytes := mload(0x40)\\n\\n            // Store the length of the first bytes array at the beginning of\\n            // the memory for tempBytes.\\n            let length := mload(_preBytes)\\n            mstore(tempBytes, length)\\n\\n            // Maintain a memory counter for the current write location in the\\n            // temp bytes array by adding the 32 bytes for the array length to\\n            // the starting location.\\n            let mc := add(tempBytes, 0x20)\\n            // Stop copying when the memory counter reaches the length of the\\n            // first bytes array.\\n            let end := add(mc, length)\\n\\n            for {\\n                // Initialize a copy counter to the start of the _preBytes data,\\n                // 32 bytes into its memory.\\n                let cc := add(_preBytes, 0x20)\\n            } lt(mc, end) {\\n                // Increase both counters by 32 bytes each iteration.\\n                mc := add(mc, 0x20)\\n                cc := add(cc, 0x20)\\n            } {\\n                // Write the _preBytes data into the tempBytes memory 32 bytes\\n                // at a time.\\n                mstore(mc, mload(cc))\\n            }\\n\\n            // Add the length of _postBytes to the current length of tempBytes\\n            // and store it as the new length in the first 32 bytes of the\\n            // tempBytes memory.\\n            length := mload(_postBytes)\\n            mstore(tempBytes, add(length, mload(tempBytes)))\\n\\n            // Move the memory counter back from a multiple of 0x20 to the\\n            // actual end of the _preBytes data.\\n            mc := end\\n            // Stop copying when the memory counter reaches the new combined\\n            // length of the arrays.\\n            end := add(mc, length)\\n\\n            for {\\n                let cc := add(_postBytes, 0x20)\\n            } lt(mc, end) {\\n                mc := add(mc, 0x20)\\n                cc := add(cc, 0x20)\\n            } {\\n                mstore(mc, mload(cc))\\n            }\\n\\n            // Update the free-memory pointer by padding our last write location\\n            // to 32 bytes: add 31 bytes to the end of tempBytes to move to the\\n            // next 32 byte block, then round down to the nearest multiple of\\n            // 32. If the sum of the length of the two arrays is zero then add\\n            // one before rounding down to leave a blank 32 bytes (the length block with 0).\\n            mstore(\\n                0x40,\\n                and(\\n                    add(add(end, iszero(add(length, mload(_preBytes)))), 31),\\n                    not(31) // Round down to the nearest 32 bytes.\\n                )\\n            )\\n        }\\n\\n        return tempBytes;\\n    }\\n\\n    function concatStorage(bytes storage _preBytes, bytes memory _postBytes) internal {\\n        assembly {\\n            // Read the first 32 bytes of _preBytes storage, which is the length\\n            // of the array. (We don't need to use the offset into the slot\\n            // because arrays use the entire slot.)\\n            let fslot := sload(_preBytes.slot)\\n            // Arrays of 31 bytes or less have an even value in their slot,\\n            // while longer arrays have an odd value. The actual length is\\n            // the slot divided by two for odd values, and the lowest order\\n            // byte divided by two for even values.\\n            // If the slot is even, bitwise and the slot with 255 and divide by\\n            // two to get the length. If the slot is odd, bitwise and the slot\\n            // with -1 and divide by two.\\n            let slength := div(and(fslot, sub(mul(0x100, iszero(and(fslot, 1))), 1)), 2)\\n            let mlength := mload(_postBytes)\\n            let newlength := add(slength, mlength)\\n            // slength can contain both the length and contents of the array\\n            // if length < 32 bytes so let's prepare for that\\n            // v. http://solidity.readthedocs.io/en/latest/miscellaneous.html#layout-of-state-variables-in-storage\\n            switch add(lt(slength, 32), lt(newlength, 32))\\n            case 2 {\\n                // Since the new array still fits in the slot, we just need to\\n                // update the contents of the slot.\\n                // uint256(bytes_storage) = uint256(bytes_storage) + uint256(bytes_memory) + new_length\\n                sstore(\\n                    _preBytes.slot,\\n                    // all the modifications to the slot are inside this\\n                    // next block\\n                    add(\\n                        // we can just add to the slot contents because the\\n                        // bytes we want to change are the LSBs\\n                        fslot,\\n                        add(\\n                            mul(\\n                                div(\\n                                    // load the bytes from memory\\n                                    mload(add(_postBytes, 0x20)),\\n                                    // zero all bytes to the right\\n                                    exp(0x100, sub(32, mlength))\\n                                ),\\n                                // and now shift left the number of bytes to\\n                                // leave space for the length in the slot\\n                                exp(0x100, sub(32, newlength))\\n                            ),\\n                            // increase length by the double of the memory\\n                            // bytes length\\n                            mul(mlength, 2)\\n                        )\\n                    )\\n                )\\n            }\\n            case 1 {\\n                // The stored value fits in the slot, but the combined value\\n                // will exceed it.\\n                // get the keccak hash to get the contents of the array\\n                mstore(0x0, _preBytes.slot)\\n                let sc := add(keccak256(0x0, 0x20), div(slength, 32))\\n\\n                // save new length\\n                sstore(_preBytes.slot, add(mul(newlength, 2), 1))\\n\\n                // The contents of the _postBytes array start 32 bytes into\\n                // the structure. Our first read should obtain the `submod`\\n                // bytes that can fit into the unused space in the last word\\n                // of the stored array. To get this, we read 32 bytes starting\\n                // from `submod`, so the data we read overlaps with the array\\n                // contents by `submod` bytes. Masking the lowest-order\\n                // `submod` bytes allows us to add that value directly to the\\n                // stored value.\\n\\n                let submod := sub(32, slength)\\n                let mc := add(_postBytes, submod)\\n                let end := add(_postBytes, mlength)\\n                let mask := sub(exp(0x100, submod), 1)\\n\\n                sstore(\\n                    sc,\\n                    add(\\n                        and(fslot, 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00),\\n                        and(mload(mc), mask)\\n                    )\\n                )\\n\\n                for {\\n                    mc := add(mc, 0x20)\\n                    sc := add(sc, 1)\\n                } lt(mc, end) {\\n                    sc := add(sc, 1)\\n                    mc := add(mc, 0x20)\\n                } {\\n                    sstore(sc, mload(mc))\\n                }\\n\\n                mask := exp(0x100, sub(mc, end))\\n\\n                sstore(sc, mul(div(mload(mc), mask), mask))\\n            }\\n            default {\\n                // get the keccak hash to get the contents of the array\\n                mstore(0x0, _preBytes.slot)\\n                // Start copying to the last used word of the stored array.\\n                let sc := add(keccak256(0x0, 0x20), div(slength, 32))\\n\\n                // save new length\\n                sstore(_preBytes.slot, add(mul(newlength, 2), 1))\\n\\n                // Copy over the first `submod` bytes of the new data as in\\n                // case 1 above.\\n                let slengthmod := mod(slength, 32)\\n                let submod := sub(32, slengthmod)\\n                let mc := add(_postBytes, submod)\\n                let end := add(_postBytes, mlength)\\n                let mask := sub(exp(0x100, submod), 1)\\n\\n                sstore(sc, add(sload(sc), and(mload(mc), mask)))\\n\\n                for {\\n                    sc := add(sc, 1)\\n                    mc := add(mc, 0x20)\\n                } lt(mc, end) {\\n                    sc := add(sc, 1)\\n                    mc := add(mc, 0x20)\\n                } {\\n                    sstore(sc, mload(mc))\\n                }\\n\\n                mask := exp(0x100, sub(mc, end))\\n\\n                sstore(sc, mul(div(mload(mc), mask), mask))\\n            }\\n        }\\n    }\\n\\n    function slice(\\n        bytes memory _bytes,\\n        uint256 _start,\\n        uint256 _length\\n    ) internal pure returns (bytes memory) {\\n        if (_length + 31 < _length) revert SliceOverflow();\\n        if (_bytes.length < _start + _length) revert SliceOutOfBounds();\\n\\n        bytes memory tempBytes;\\n\\n        assembly {\\n            switch iszero(_length)\\n            case 0 {\\n                // Get a location of some free memory and store it in tempBytes as\\n                // Solidity does for memory variables.\\n                tempBytes := mload(0x40)\\n\\n                // The first word of the slice result is potentially a partial\\n                // word read from the original array. To read it, we calculate\\n                // the length of that partial word and start copying that many\\n                // bytes into the array. The first word we copy will start with\\n                // data we don't care about, but the last `lengthmod` bytes will\\n                // land at the beginning of the contents of the new array. When\\n                // we're done copying, we overwrite the full first word with\\n                // the actual length of the slice.\\n                let lengthmod := and(_length, 31)\\n\\n                // The multiplication in the next line is necessary\\n                // because when slicing multiples of 32 bytes (lengthmod == 0)\\n                // the following copy loop was copying the origin's length\\n                // and then ending prematurely not copying everything it should.\\n                let mc := add(add(tempBytes, lengthmod), mul(0x20, iszero(lengthmod)))\\n                let end := add(mc, _length)\\n\\n                for {\\n                    // The multiplication in the next line has the same exact purpose\\n                    // as the one above.\\n                    let cc := add(add(add(_bytes, lengthmod), mul(0x20, iszero(lengthmod))), _start)\\n                } lt(mc, end) {\\n                    mc := add(mc, 0x20)\\n                    cc := add(cc, 0x20)\\n                } {\\n                    mstore(mc, mload(cc))\\n                }\\n\\n                mstore(tempBytes, _length)\\n\\n                //update free-memory pointer\\n                //allocating the array padded to 32 bytes like the compiler does now\\n                mstore(0x40, and(add(mc, 31), not(31)))\\n            }\\n            //if we want a zero-length slice let's just return a zero-length array\\n            default {\\n                tempBytes := mload(0x40)\\n                //zero out the 32 bytes slice we are about to return\\n                //we need to do it because Solidity does not garbage collect\\n                mstore(tempBytes, 0)\\n\\n                mstore(0x40, add(tempBytes, 0x20))\\n            }\\n        }\\n\\n        return tempBytes;\\n    }\\n\\n    function toAddress(bytes memory _bytes, uint256 _start) internal pure returns (address) {\\n        if (_bytes.length < _start + 20) {\\n            revert AddressOutOfBounds();\\n        }\\n        address tempAddress;\\n\\n        assembly {\\n            tempAddress := div(mload(add(add(_bytes, 0x20), _start)), 0x1000000000000000000000000)\\n        }\\n\\n        return tempAddress;\\n    }\\n\\n    function toUint8(bytes memory _bytes, uint256 _start) internal pure returns (uint8) {\\n        if (_bytes.length < _start + 1) {\\n            revert UintOutOfBounds();\\n        }\\n        uint8 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0x1), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toUint16(bytes memory _bytes, uint256 _start) internal pure returns (uint16) {\\n        if (_bytes.length < _start + 2) {\\n            revert UintOutOfBounds();\\n        }\\n        uint16 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0x2), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toUint32(bytes memory _bytes, uint256 _start) internal pure returns (uint32) {\\n        if (_bytes.length < _start + 4) {\\n            revert UintOutOfBounds();\\n        }\\n        uint32 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0x4), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toUint64(bytes memory _bytes, uint256 _start) internal pure returns (uint64) {\\n        if (_bytes.length < _start + 8) {\\n            revert UintOutOfBounds();\\n        }\\n        uint64 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0x8), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toUint96(bytes memory _bytes, uint256 _start) internal pure returns (uint96) {\\n        if (_bytes.length < _start + 12) {\\n            revert UintOutOfBounds();\\n        }\\n        uint96 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0xc), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toUint128(bytes memory _bytes, uint256 _start) internal pure returns (uint128) {\\n        if (_bytes.length < _start + 16) {\\n            revert UintOutOfBounds();\\n        }\\n        uint128 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0x10), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toUint256(bytes memory _bytes, uint256 _start) internal pure returns (uint256) {\\n        if (_bytes.length < _start + 32) {\\n            revert UintOutOfBounds();\\n        }\\n        uint256 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0x20), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toBytes32(bytes memory _bytes, uint256 _start) internal pure returns (bytes32) {\\n        if (_bytes.length < _start + 32) {\\n            revert UintOutOfBounds();\\n        }\\n        bytes32 tempBytes32;\\n\\n        assembly {\\n            tempBytes32 := mload(add(add(_bytes, 0x20), _start))\\n        }\\n\\n        return tempBytes32;\\n    }\\n\\n    function equal(bytes memory _preBytes, bytes memory _postBytes) internal pure returns (bool) {\\n        bool success = true;\\n\\n        assembly {\\n            let length := mload(_preBytes)\\n\\n            // if lengths don't match the arrays are not equal\\n            switch eq(length, mload(_postBytes))\\n            case 1 {\\n                // cb is a circuit breaker in the for loop since there's\\n                //  no said feature for inline assembly loops\\n                // cb = 1 - don't breaker\\n                // cb = 0 - break\\n                let cb := 1\\n\\n                let mc := add(_preBytes, 0x20)\\n                let end := add(mc, length)\\n\\n                for {\\n                    let cc := add(_postBytes, 0x20)\\n                    // the next line is the loop condition:\\n                    // while(uint256(mc < end) + cb == 2)\\n                } eq(add(lt(mc, end), cb), 2) {\\n                    mc := add(mc, 0x20)\\n                    cc := add(cc, 0x20)\\n                } {\\n                    // if any of these checks fails then arrays are not equal\\n                    if iszero(eq(mload(mc), mload(cc))) {\\n                        // unsuccess:\\n                        success := 0\\n                        cb := 0\\n                    }\\n                }\\n            }\\n            default {\\n                // unsuccess:\\n                success := 0\\n            }\\n        }\\n\\n        return success;\\n    }\\n\\n    function equalStorage(bytes storage _preBytes, bytes memory _postBytes) internal view returns (bool) {\\n        bool success = true;\\n\\n        assembly {\\n            // we know _preBytes_offset is 0\\n            let fslot := sload(_preBytes.slot)\\n            // Decode the length of the stored array like in concatStorage().\\n            let slength := div(and(fslot, sub(mul(0x100, iszero(and(fslot, 1))), 1)), 2)\\n            let mlength := mload(_postBytes)\\n\\n            // if lengths don't match the arrays are not equal\\n            switch eq(slength, mlength)\\n            case 1 {\\n                // slength can contain both the length and contents of the array\\n                // if length < 32 bytes so let's prepare for that\\n                // v. http://solidity.readthedocs.io/en/latest/miscellaneous.html#layout-of-state-variables-in-storage\\n                if iszero(iszero(slength)) {\\n                    switch lt(slength, 32)\\n                    case 1 {\\n                        // blank the last byte which is the length\\n                        fslot := mul(div(fslot, 0x100), 0x100)\\n\\n                        if iszero(eq(fslot, mload(add(_postBytes, 0x20)))) {\\n                            // unsuccess:\\n                            success := 0\\n                        }\\n                    }\\n                    default {\\n                        // cb is a circuit breaker in the for loop since there's\\n                        //  no said feature for inline assembly loops\\n                        // cb = 1 - don't breaker\\n                        // cb = 0 - break\\n                        let cb := 1\\n\\n                        // get the keccak hash to get the contents of the array\\n                        mstore(0x0, _preBytes.slot)\\n                        let sc := keccak256(0x0, 0x20)\\n\\n                        let mc := add(_postBytes, 0x20)\\n                        let end := add(mc, mlength)\\n\\n                        // the next line is the loop condition:\\n                        // while(uint256(mc < end) + cb == 2)\\n                        // solhint-disable-next-line no-empty-blocks\\n                        for {\\n\\n                        } eq(add(lt(mc, end), cb), 2) {\\n                            sc := add(sc, 1)\\n                            mc := add(mc, 0x20)\\n                        } {\\n                            if iszero(eq(sload(sc), mload(mc))) {\\n                                // unsuccess:\\n                                success := 0\\n                                cb := 0\\n                            }\\n                        }\\n                    }\\n                }\\n            }\\n            default {\\n                // unsuccess:\\n                success := 0\\n            }\\n        }\\n\\n        return success;\\n    }\\n}\\n\",\"keccak256\":\"0x597f5185104f7c91df7404c5b0c60cd2b428280b83603c6144f856dc2ff20016\",\"license\":\"MIT\"},\"src/Libraries/LibDiamond.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.9;\\r\\n\\r\\nimport { IDiamondCut } from \\\"../Interfaces/IDiamondCut.sol\\\";\\r\\nimport { LibUtil } from \\\"../Libraries/LibUtil.sol\\\";\\r\\nimport { OnlyContractOwner } from \\\"../Errors/GenericErrors.sol\\\";\\r\\n\\r\\n\\r\\n/// Implementation of EIP-2535 Diamond Standard\\r\\n/// https://eips.ethereum.org/EIPS/eip-2535\\r\\nlibrary LibDiamond {\\r\\n    bytes32 internal constant DIAMOND_STORAGE_POSITION = keccak256(\\\"diamond.standard.diamond.storage\\\");\\r\\n\\r\\n    // Diamond specific errors\\r\\n    error IncorrectFacetCutAction();\\r\\n    error NoSelectorsInFace();\\r\\n    error FunctionAlreadyExists();\\r\\n    error FacetAddressIsZero();\\r\\n    error FacetAddressIsNotZero();\\r\\n    error FacetContainsNoCode();\\r\\n    error FunctionDoesNotExist();\\r\\n    error FunctionIsImmutable();\\r\\n    error InitZeroButCalldataNotEmpty();\\r\\n    error CalldataEmptyButInitNotZero();\\r\\n    error InitReverted();\\r\\n    // ----------------\\r\\n\\r\\n    struct FacetAddressAndPosition {\\r\\n        address facetAddress;\\r\\n        uint96 functionSelectorPosition; // position in facetFunctionSelectors.functionSelectors array\\r\\n    }\\r\\n\\r\\n    struct FacetFunctionSelectors {\\r\\n        bytes4[] functionSelectors;\\r\\n        uint256 facetAddressPosition; // position of facetAddress in facetAddresses array\\r\\n    }\\r\\n\\r\\n    struct DiamondStorage {\\r\\n        // maps function selector to the facet address and\\r\\n        // the position of the selector in the facetFunctionSelectors.selectors array\\r\\n        mapping(bytes4 => FacetAddressAndPosition) selectorToFacetAndPosition;\\r\\n        // maps facet addresses to function selectors\\r\\n        mapping(address => FacetFunctionSelectors) facetFunctionSelectors;\\r\\n        // facet addresses\\r\\n        address[] facetAddresses;\\r\\n        // Used to query if a contract implements an interface.\\r\\n        // Used to implement ERC-165.\\r\\n        mapping(bytes4 => bool) supportedInterfaces;\\r\\n        // owner of the contract\\r\\n        address contractOwner;\\r\\n    }\\r\\n\\r\\n    function diamondStorage() internal pure returns (DiamondStorage storage ds) {\\r\\n        bytes32 position = DIAMOND_STORAGE_POSITION;\\r\\n        // solhint-disable-next-line no-inline-assembly\\r\\n        assembly {\\r\\n            ds.slot := position\\r\\n        }\\r\\n    }\\r\\n\\r\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\r\\n\\r\\n    function setContractOwner(address _newOwner) internal {\\r\\n        DiamondStorage storage ds = diamondStorage();\\r\\n        address previousOwner = ds.contractOwner;\\r\\n        ds.contractOwner = _newOwner;\\r\\n        emit OwnershipTransferred(previousOwner, _newOwner);\\r\\n    }\\r\\n\\r\\n    function contractOwner() internal view returns (address contractOwner_) {\\r\\n        contractOwner_ = diamondStorage().contractOwner;\\r\\n    }\\r\\n\\r\\n    function enforceIsContractOwner() internal view {\\r\\n        if (msg.sender != diamondStorage().contractOwner) revert OnlyContractOwner();\\r\\n    }\\r\\n\\r\\n    event DiamondCut(IDiamondCut.FacetCut[] _diamondCut, address _init, bytes _calldata);\\r\\n\\r\\n    // Internal function version of diamondCut\\r\\n    function diamondCut(\\r\\n        IDiamondCut.FacetCut[] memory _diamondCut,\\r\\n        address _init,\\r\\n        bytes memory _calldata\\r\\n    ) internal {\\r\\n        for (uint256 facetIndex; facetIndex < _diamondCut.length; ) {\\r\\n            IDiamondCut.FacetCutAction action = _diamondCut[facetIndex].action;\\r\\n            if (action == IDiamondCut.FacetCutAction.Add) {\\r\\n                addFunctions(_diamondCut[facetIndex].facetAddress, _diamondCut[facetIndex].functionSelectors);\\r\\n            } else if (action == IDiamondCut.FacetCutAction.Replace) {\\r\\n                replaceFunctions(_diamondCut[facetIndex].facetAddress, _diamondCut[facetIndex].functionSelectors);\\r\\n            } else if (action == IDiamondCut.FacetCutAction.Remove) {\\r\\n                removeFunctions(_diamondCut[facetIndex].facetAddress, _diamondCut[facetIndex].functionSelectors);\\r\\n            } else {\\r\\n                revert IncorrectFacetCutAction();\\r\\n            }\\r\\n            unchecked {\\r\\n                ++facetIndex;\\r\\n            }\\r\\n        }\\r\\n        emit DiamondCut(_diamondCut, _init, _calldata);\\r\\n        initializeDiamondCut(_init, _calldata);\\r\\n    }\\r\\n\\r\\n    function addFunctions(address _facetAddress, bytes4[] memory _functionSelectors) internal {\\r\\n        if (_functionSelectors.length == 0) {\\r\\n            revert NoSelectorsInFace();\\r\\n        }\\r\\n        DiamondStorage storage ds = diamondStorage();\\r\\n        if (LibUtil.isZeroAddress(_facetAddress)) {\\r\\n            revert FacetAddressIsZero();\\r\\n        }\\r\\n        uint96 selectorPosition = uint96(ds.facetFunctionSelectors[_facetAddress].functionSelectors.length);\\r\\n        // add new facet address if it does not exist\\r\\n        if (selectorPosition == 0) {\\r\\n            addFacet(ds, _facetAddress);\\r\\n        }\\r\\n        for (uint256 selectorIndex; selectorIndex < _functionSelectors.length; ) {\\r\\n            bytes4 selector = _functionSelectors[selectorIndex];\\r\\n            address oldFacetAddress = ds.selectorToFacetAndPosition[selector].facetAddress;\\r\\n            if (!LibUtil.isZeroAddress(oldFacetAddress)) {\\r\\n                revert FunctionAlreadyExists();\\r\\n            }\\r\\n            addFunction(ds, selector, selectorPosition, _facetAddress);\\r\\n            unchecked {\\r\\n                ++selectorPosition;\\r\\n                ++selectorIndex;\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function replaceFunctions(address _facetAddress, bytes4[] memory _functionSelectors) internal {\\r\\n        if (_functionSelectors.length == 0) {\\r\\n            revert NoSelectorsInFace();\\r\\n        }\\r\\n        DiamondStorage storage ds = diamondStorage();\\r\\n        if (LibUtil.isZeroAddress(_facetAddress)) {\\r\\n            revert FacetAddressIsZero();\\r\\n        }\\r\\n        uint96 selectorPosition = uint96(ds.facetFunctionSelectors[_facetAddress].functionSelectors.length);\\r\\n        // add new facet address if it does not exist\\r\\n        if (selectorPosition == 0) {\\r\\n            addFacet(ds, _facetAddress);\\r\\n        }\\r\\n        for (uint256 selectorIndex; selectorIndex < _functionSelectors.length; ) {\\r\\n            bytes4 selector = _functionSelectors[selectorIndex];\\r\\n            address oldFacetAddress = ds.selectorToFacetAndPosition[selector].facetAddress;\\r\\n            if (oldFacetAddress == _facetAddress) {\\r\\n                revert FunctionAlreadyExists();\\r\\n            }\\r\\n            removeFunction(ds, oldFacetAddress, selector);\\r\\n            addFunction(ds, selector, selectorPosition, _facetAddress);\\r\\n            unchecked {\\r\\n                ++selectorPosition;\\r\\n                ++selectorIndex;\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function removeFunctions(address _facetAddress, bytes4[] memory _functionSelectors) internal {\\r\\n        if (_functionSelectors.length == 0) {\\r\\n            revert NoSelectorsInFace();\\r\\n        }\\r\\n        DiamondStorage storage ds = diamondStorage();\\r\\n        // if function does not exist then do nothing and return\\r\\n        if (!LibUtil.isZeroAddress(_facetAddress)) {\\r\\n            revert FacetAddressIsNotZero();\\r\\n        }\\r\\n        for (uint256 selectorIndex; selectorIndex < _functionSelectors.length; ) {\\r\\n            bytes4 selector = _functionSelectors[selectorIndex];\\r\\n            address oldFacetAddress = ds.selectorToFacetAndPosition[selector].facetAddress;\\r\\n            removeFunction(ds, oldFacetAddress, selector);\\r\\n            unchecked {\\r\\n                ++selectorIndex;\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function addFacet(DiamondStorage storage ds, address _facetAddress) internal {\\r\\n        enforceHasContractCode(_facetAddress);\\r\\n        ds.facetFunctionSelectors[_facetAddress].facetAddressPosition = ds.facetAddresses.length;\\r\\n        ds.facetAddresses.push(_facetAddress);\\r\\n    }\\r\\n\\r\\n    function addFunction(\\r\\n        DiamondStorage storage ds,\\r\\n        bytes4 _selector,\\r\\n        uint96 _selectorPosition,\\r\\n        address _facetAddress\\r\\n    ) internal {\\r\\n        ds.selectorToFacetAndPosition[_selector].functionSelectorPosition = _selectorPosition;\\r\\n        ds.facetFunctionSelectors[_facetAddress].functionSelectors.push(_selector);\\r\\n        ds.selectorToFacetAndPosition[_selector].facetAddress = _facetAddress;\\r\\n    }\\r\\n\\r\\n    function removeFunction(\\r\\n        DiamondStorage storage ds,\\r\\n        address _facetAddress,\\r\\n        bytes4 _selector\\r\\n    ) internal {\\r\\n        if (LibUtil.isZeroAddress(_facetAddress)) {\\r\\n            revert FunctionDoesNotExist();\\r\\n        }\\r\\n        // an immutable function is a function defined directly in a diamond\\r\\n        if (_facetAddress == address(this)) {\\r\\n            revert FunctionIsImmutable();\\r\\n        }\\r\\n        // replace selector with last selector, then delete last selector\\r\\n        uint256 selectorPosition = ds.selectorToFacetAndPosition[_selector].functionSelectorPosition;\\r\\n        uint256 lastSelectorPosition = ds.facetFunctionSelectors[_facetAddress].functionSelectors.length - 1;\\r\\n        // if not the same then replace _selector with lastSelector\\r\\n        if (selectorPosition != lastSelectorPosition) {\\r\\n            bytes4 lastSelector = ds.facetFunctionSelectors[_facetAddress].functionSelectors[lastSelectorPosition];\\r\\n            ds.facetFunctionSelectors[_facetAddress].functionSelectors[selectorPosition] = lastSelector;\\r\\n            ds.selectorToFacetAndPosition[lastSelector].functionSelectorPosition = uint96(selectorPosition);\\r\\n        }\\r\\n        // delete the last selector\\r\\n        ds.facetFunctionSelectors[_facetAddress].functionSelectors.pop();\\r\\n        delete ds.selectorToFacetAndPosition[_selector];\\r\\n\\r\\n        // if no more selectors for facet address then delete the facet address\\r\\n        if (lastSelectorPosition == 0) {\\r\\n            // replace facet address with last facet address and delete last facet address\\r\\n            uint256 lastFacetAddressPosition = ds.facetAddresses.length - 1;\\r\\n            uint256 facetAddressPosition = ds.facetFunctionSelectors[_facetAddress].facetAddressPosition;\\r\\n            if (facetAddressPosition != lastFacetAddressPosition) {\\r\\n                address lastFacetAddress = ds.facetAddresses[lastFacetAddressPosition];\\r\\n                ds.facetAddresses[facetAddressPosition] = lastFacetAddress;\\r\\n                ds.facetFunctionSelectors[lastFacetAddress].facetAddressPosition = facetAddressPosition;\\r\\n            }\\r\\n            ds.facetAddresses.pop();\\r\\n            delete ds.facetFunctionSelectors[_facetAddress].facetAddressPosition;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function initializeDiamondCut(address _init, bytes memory _calldata) internal {\\r\\n        if (LibUtil.isZeroAddress(_init)) {\\r\\n            if (_calldata.length != 0) {\\r\\n                revert InitZeroButCalldataNotEmpty();\\r\\n            }\\r\\n        } else {\\r\\n            if (_calldata.length == 0) {\\r\\n                revert CalldataEmptyButInitNotZero();\\r\\n            }\\r\\n            if (_init != address(this)) {\\r\\n                enforceHasContractCode(_init);\\r\\n            }\\r\\n            // solhint-disable-next-line avoid-low-level-calls\\r\\n            (bool success, bytes memory error) = _init.delegatecall(_calldata);\\r\\n            if (!success) {\\r\\n                if (error.length > 0) {\\r\\n                    // bubble up the error\\r\\n                    revert(string(error));\\r\\n                } else {\\r\\n                    revert InitReverted();\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function enforceHasContractCode(address _contract) internal view {\\r\\n        uint256 contractSize;\\r\\n        // solhint-disable-next-line no-inline-assembly\\r\\n        assembly {\\r\\n            contractSize := extcodesize(_contract)\\r\\n        }\\r\\n        if (contractSize == 0) {\\r\\n            revert FacetContainsNoCode();\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xcaff5e5cea1de2d54c3b487c82f10bc8129e181ec0ff8a207323ee17bf189f83\",\"license\":\"MIT\"},\"src/Libraries/LibUtil.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.9;\\r\\n\\r\\nimport \\\"./LibBytes.sol\\\";\\r\\n\\r\\nlibrary LibUtil {\\r\\n    using LibBytes for bytes;\\r\\n\\r\\n    function getRevertMsg(bytes memory _res) internal pure returns (string memory) {\\r\\n        // If the _res length is less than 68, then the transaction failed silently (without a revert message)\\r\\n        if (_res.length < 68) return \\\"Transaction reverted silently\\\";\\r\\n        bytes memory revertData = _res.slice(4, _res.length - 4); // Remove the selector which is the first 4 bytes\\r\\n        return abi.decode(revertData, (string)); // All that remains is the revert string\\r\\n    }\\r\\n\\r\\n    /// @notice Determines whether the given address is the zero address\\r\\n    /// @param addr The address to verify\\r\\n    /// @return Boolean indicating if the address is the zero address\\r\\n    function isZeroAddress(address addr) internal pure returns (bool) {\\r\\n        return addr == address(0);\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x92a7685bd1ea515757c9e664181b9820e431e87ec2550d62568365c479edb2e3\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040526040516200375a3803806200375a833981810160405281019062000029919062001756565b6200003f82620001f760201b6200015e1760201c565b6000600167ffffffffffffffff8111156200005f576200005e6200179d565b5b6040519080825280602002602001820160405280156200009c57816020015b62000088620016a0565b8152602001906001900390816200007e5790505b5090506000600167ffffffffffffffff811115620000bf57620000be6200179d565b5b604051908082528060200260200182016040528015620000ee5781602001602082028036833780820191505090505b509050631f931c1c60e01b8160008151811062000110576200010f620017cc565b5b60200260200101907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191690817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19168152505060405180606001604052808473ffffffffffffffffffffffffffffffffffffffff168152602001600060028111156200019a5762000199620017fb565b5b81526020018281525082600081518110620001ba57620001b9620017cc565b5b6020026020010181905250620001ed82600060405180602001604052806000815250620002d660201b620002351760201c565b5050505062001d21565b6000620002096200054560201b60201c565b905060008160040160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050828260040160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508273ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a3505050565b60005b8351811015620004f0576000848281518110620002fb57620002fa620017cc565b5b60200260200101516020015190506000600281111562000320576200031f620017fb565b5b816002811115620003365762000335620017fb565b5b03620003965762000390858381518110620003565762000355620017cc565b5b602002602001015160000151868481518110620003785762000377620017cc565b5b6020026020010151604001516200057260201b60201c565b620004e3565b60016002811115620003ad57620003ac620017fb565b5b816002811115620003c357620003c2620017fb565b5b0362000423576200041d858381518110620003e357620003e2620017cc565b5b602002602001015160000151868481518110620004055762000404620017cc565b5b602002602001015160400151620007ac60201b60201c565b620004e2565b600280811115620004395762000438620017fb565b5b8160028111156200044f576200044e620017fb565b5b03620004af57620004a98583815181106200046f576200046e620017cc565b5b602002602001015160000151868481518110620004915762000490620017cc565b5b60200260200101516040015162000a1260201b60201c565b620004e1565b6040517fe548e6b500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5b5b81600101915050620002d9565b507f8faa70878671ccd212d20771b795c50af8fd3ff6cf27f4bde57e5d4de0aeb673838383604051620005269392919062001b57565b60405180910390a162000540828262000b8060201b60201c565b505050565b6000807fc8fcad8db84d3cc18b4c41d551ea0ee66dd599cde068d998e57d5e09332c131c90508091505090565b6000815103620005ae576040517f7bc5595000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000620005c06200054560201b60201c565b9050620005d88362000d5a60201b620004531760201c565b1562000610576040517fc68ec83a00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60008160010160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000018054905090506000816bffffffffffffffffffffffff1603620006865762000685828562000d9260201b60201c565b5b60005b8351811015620007a5576000848281518110620006ab57620006aa620017cc565b5b602002602001015190506000846000016000837bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050620007468162000d5a60201b620004531760201c565b6200077d576040517fa023275d00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b620007918583868a62000e5c60201b60201c565b836001019350826001019250505062000689565b5050505050565b6000815103620007e8576040517f7bc5595000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000620007fa6200054560201b60201c565b9050620008128362000d5a60201b620004531760201c565b156200084a576040517fc68ec83a00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60008160010160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000018054905090506000816bffffffffffffffffffffffff1603620008c057620008bf828562000d9260201b60201c565b5b60005b835181101562000a0b576000848281518110620008e557620008e4620017cc565b5b602002602001015190506000846000016000837bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690508673ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603620009d0576040517fa023275d00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b620009e38582846200100960201b60201c565b620009f78583868a62000e5c60201b60201c565b8360010193508260010192505050620008c3565b5050505050565b600081510362000a4e576040517f7bc5595000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600062000a606200054560201b60201c565b905062000a788362000d5a60201b620004531760201c565b62000aaf576040517f79c9df2200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60005b825181101562000b7a57600083828151811062000ad45762000ad3620017cc565b5b602002602001015190506000836000016000837bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905062000b6c8482846200100960201b60201c565b826001019250505062000ab2565b50505050565b62000b968262000d5a60201b620004531760201c565b1562000bde57600081511462000bd8576040517f9811686000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b62000d56565b600081510362000c1a576040517f4220056600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b3073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161462000c605762000c5f826200165b60201b60201c565b5b6000808373ffffffffffffffffffffffffffffffffffffffff168360405162000c8a919062001be4565b600060405180830381855af49150503d806000811462000cc7576040519150601f19603f3d011682016040523d82523d6000602084013e62000ccc565b606091505b50915091508162000d535760008151111562000d2157806040517f08c379a000000000000000000000000000000000000000000000000000000000815260040162000d18919062001c5a565b60405180910390fd5b6040517fc53ebed500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b50505b5050565b60008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16149050919050565b62000da3816200165b60201b60201c565b81600201805490508260010160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206001018190555081600201819080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505050565b81846000016000857bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916815260200190815260200160002060000160146101000a8154816bffffffffffffffffffffffff02191690836bffffffffffffffffffffffff1602179055508360010160008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000018390806001815401808255809150506001900390600052602060002090600891828204019190066004029091909190916101000a81548163ffffffff021916908360e01c021790555080846000016000857bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916815260200190815260200160002060000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050505050565b6200101f8262000d5a60201b620004531760201c565b1562001057576040517fa9ad62f800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b3073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603620010bd576040517fc3c5ec3700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000836000016000837bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916815260200190815260200160002060000160149054906101000a90046bffffffffffffffffffffffff166bffffffffffffffffffffffff169050600060018560010160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000018054905062001196919062001cb7565b9050808214620013315760008560010160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000018281548110620011fb57620011fa620017cc565b5b90600052602060002090600891828204019190066004029054906101000a900460e01b9050808660010160008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000184815481106200127a5762001279620017cc565b5b90600052602060002090600891828204019190066004026101000a81548163ffffffff021916908360e01c021790555082866000016000837bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916815260200190815260200160002060000160146101000a8154816bffffffffffffffffffffffff02191690836bffffffffffffffffffffffff160217905550505b8460010160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000180548062001388576200138762001cf2565b5b60019003818190600052602060002090600891828204019190066004026101000a81549063ffffffff02191690559055846000016000847bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19168152602001908152602001600020600080820160006101000a81549073ffffffffffffffffffffffffffffffffffffffff02191690556000820160146101000a8154906bffffffffffffffffffffffff0219169055505060008103620016545760006001866002018054905062001475919062001cb7565b905060008660010160008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600101549050818114620015bd576000876002018381548110620014e357620014e2620017cc565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050808860020183815481106200152a5762001529620017cc565b5b9060005260206000200160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550818860010160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060010181905550505b86600201805480620015d457620015d362001cf2565b5b6001900381819060005260206000200160006101000a81549073ffffffffffffffffffffffffffffffffffffffff021916905590558660010160008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206001016000905550505b5050505050565b6000813b9050600081036200169c576040517fe350060000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5050565b6040518060600160405280600073ffffffffffffffffffffffffffffffffffffffff16815260200160006002811115620016df57620016de620017fb565b5b8152602001606081525090565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006200171e82620016f1565b9050919050565b620017308162001711565b81146200173c57600080fd5b50565b600081519050620017508162001725565b92915050565b6000806040838503121562001770576200176f620016ec565b5b600062001780858286016200173f565b925050602062001793858286016200173f565b9150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b620018618162001711565b82525050565b600381106200187b576200187a620017fb565b5b50565b60008190506200188e8262001867565b919050565b6000620018a0826200187e565b9050919050565b620018b28162001893565b82525050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b6200191b81620018e4565b82525050565b60006200192f838362001910565b60208301905092915050565b6000602082019050919050565b60006200195582620018b8565b620019618185620018c3565b93506200196e83620018d4565b8060005b83811015620019a557815162001989888262001921565b975062001996836200193b565b92505060018101905062001972565b5085935050505092915050565b6000606083016000830151620019cc600086018262001856565b506020830151620019e16020860182620018a7565b5060408301518482036040860152620019fb828262001948565b9150508091505092915050565b600062001a168383620019b2565b905092915050565b6000602082019050919050565b600062001a38826200182a565b62001a44818562001835565b93508360208202850162001a588562001846565b8060005b8581101562001a9a578484038952815162001a78858262001a08565b945062001a858362001a1e565b925060208a0199505060018101905062001a5c565b50829750879550505050505092915050565b62001ab78162001711565b82525050565b600081519050919050565b600082825260208201905092915050565b60005b8381101562001af957808201518184015260208101905062001adc565b60008484015250505050565b6000601f19601f8301169050919050565b600062001b238262001abd565b62001b2f818562001ac8565b935062001b4181856020860162001ad9565b62001b4c8162001b05565b840191505092915050565b6000606082019050818103600083015262001b73818662001a2b565b905062001b84602083018562001aac565b818103604083015262001b98818462001b16565b9050949350505050565b600081905092915050565b600062001bba8262001abd565b62001bc6818562001ba2565b935062001bd881856020860162001ad9565b80840191505092915050565b600062001bf2828462001bad565b915081905092915050565b600081519050919050565b600082825260208201905092915050565b600062001c268262001bfd565b62001c32818562001c08565b935062001c4481856020860162001ad9565b62001c4f8162001b05565b840191505092915050565b6000602082019050818103600083015262001c76818462001c19565b905092915050565b6000819050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600062001cc48262001c7e565b915062001cd18362001c7e565b925082820390508181111562001cec5762001ceb62001c88565b5b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603160045260246000fd5b611a298062001d316000396000f3fe60806040523661000b57005b6000807fc8fcad8db84d3cc18b4c41d551ea0ee66dd599cde068d998e57d5e09332c131c9050809150600082600001600080357fffffffff00000000000000000000000000000000000000000000000000000000167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603610138576040517fa9ad62f800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b3660008037600080366000845af43d6000803e8060008114610159573d6000f35b3d6000fd5b600061016861048b565b905060008160040160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050828260040160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508273ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a3505050565b60005b8351811015610408576000848281518110610256576102556114c6565b5b602002602001015160200151905060006002811115610278576102776114f5565b5b81600281111561028b5761028a6114f5565b5b036102db576102d68583815181106102a6576102a56114c6565b5b6020026020010151600001518684815181106102c5576102c46114c6565b5b6020026020010151604001516104b8565b6103fc565b600160028111156102ef576102ee6114f5565b5b816002811115610302576103016114f5565b5b036103525761034d85838151811061031d5761031c6114c6565b5b60200260200101516000015186848151811061033c5761033b6114c6565b5b6020026020010151604001516106b7565b6103fb565b600280811115610365576103646114f5565b5b816002811115610378576103776114f5565b5b036103c8576103c3858381518110610393576103926114c6565b5b6020026020010151600001518684815181106103b2576103b16114c6565b5b6020026020010151604001516108e7565b6103fa565b6040517fe548e6b500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5b5b81600101915050610238565b507f8faa70878671ccd212d20771b795c50af8fd3ff6cf27f4bde57e5d4de0aeb67383838360405161043c93929190611848565b60405180910390a161044e8282610a31565b505050565b60008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16149050919050565b6000807fc8fcad8db84d3cc18b4c41d551ea0ee66dd599cde068d998e57d5e09332c131c90508091505090565b60008151036104f3576040517f7bc5595000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60006104fd61048b565b905061050883610453565b1561053f576040517fc68ec83a00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60008160010160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000018054905090506000816bffffffffffffffffffffffff16036105ac576105ab8285610be9565b5b60005b83518110156106b05760008482815181106105cd576105cc6114c6565b5b602002602001015190506000846000016000837bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905061065b81610453565b610691576040517fa023275d00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b61069d8583868a610cab565b83600101935082600101925050506105af565b5050505050565b60008151036106f2576040517f7bc5595000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60006106fc61048b565b905061070783610453565b1561073e576040517fc68ec83a00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60008160010160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000018054905090506000816bffffffffffffffffffffffff16036107ab576107aa8285610be9565b5b60005b83518110156108e05760008482815181106107cc576107cb6114c6565b5b602002602001015190506000846000016000837bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690508673ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16036108b6576040517fa023275d00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6108c1858284610e58565b6108cd8583868a610cab565b83600101935082600101925050506107ae565b5050505050565b6000815103610922576040517f7bc5595000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600061092c61048b565b905061093783610453565b61096d576040517f79c9df2200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60005b8251811015610a2b57600083828151811061098e5761098d6114c6565b5b602002602001015190506000836000016000837bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050610a1e848284610e58565b8260010192505050610970565b50505050565b610a3a82610453565b15610a7f576000815114610a7a576040517f9811686000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b610be5565b6000815103610aba576040517f4220056600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b3073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614610af757610af682611482565b5b6000808373ffffffffffffffffffffffffffffffffffffffff1683604051610b1f91906118c9565b600060405180830381855af49150503d8060008114610b5a576040519150601f19603f3d011682016040523d82523d6000602084013e610b5f565b606091505b509150915081610be257600081511115610bb057806040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ba79190611935565b60405180910390fd5b6040517fc53ebed500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b50505b5050565b610bf281611482565b81600201805490508260010160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206001018190555081600201819080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505050565b81846000016000857bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916815260200190815260200160002060000160146101000a8154816bffffffffffffffffffffffff02191690836bffffffffffffffffffffffff1602179055508360010160008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000018390806001815401808255809150506001900390600052602060002090600891828204019190066004029091909190916101000a81548163ffffffff021916908360e01c021790555080846000016000857bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916815260200190815260200160002060000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050505050565b610e6182610453565b15610e98576040517fa9ad62f800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b3073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603610efd576040517fc3c5ec3700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000836000016000837bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916815260200190815260200160002060000160149054906101000a90046bffffffffffffffffffffffff166bffffffffffffffffffffffff169050600060018560010160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000180549050610fd49190611990565b90508082146111685760008560010160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000018281548110611035576110346114c6565b5b90600052602060002090600891828204019190066004029054906101000a900460e01b9050808660010160008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000184815481106110b1576110b06114c6565b5b90600052602060002090600891828204019190066004026101000a81548163ffffffff021916908360e01c021790555082866000016000837bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916815260200190815260200160002060000160146101000a8154816bffffffffffffffffffffffff02191690836bffffffffffffffffffffffff160217905550505b8460010160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000018054806111bc576111bb6119c4565b5b60019003818190600052602060002090600891828204019190066004026101000a81549063ffffffff02191690559055846000016000847bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19168152602001908152602001600020600080820160006101000a81549073ffffffffffffffffffffffffffffffffffffffff02191690556000820160146101000a8154906bffffffffffffffffffffffff021916905550506000810361147b576000600186600201805490506112a69190611990565b905060008660010160008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206001015490508181146113e75760008760020183815481106113105761130f6114c6565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905080886002018381548110611354576113536114c6565b5b9060005260206000200160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550818860010160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060010181905550505b866002018054806113fb576113fa6119c4565b5b6001900381819060005260206000200160006101000a81549073ffffffffffffffffffffffffffffffffffffffff021916905590558660010160008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206001016000905550505b5050505050565b6000813b9050600081036114c2576040517fe350060000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061157b82611550565b9050919050565b61158b81611570565b82525050565b600381106115a2576115a16114f5565b5b50565b60008190506115b382611591565b919050565b60006115c3826115a5565b9050919050565b6115d3816115b8565b82525050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b61163a81611605565b82525050565b600061164c8383611631565b60208301905092915050565b6000602082019050919050565b6000611670826115d9565b61167a81856115e4565b9350611685836115f5565b8060005b838110156116b657815161169d8882611640565b97506116a883611658565b925050600181019050611689565b5085935050505092915050565b60006060830160008301516116db6000860182611582565b5060208301516116ee60208601826115ca565b50604083015184820360408601526117068282611665565b9150508091505092915050565b600061171f83836116c3565b905092915050565b6000602082019050919050565b600061173f82611524565b611749818561152f565b93508360208202850161175b85611540565b8060005b8581101561179757848403895281516117788582611713565b945061178383611727565b925060208a0199505060018101905061175f565b50829750879550505050505092915050565b6117b281611570565b82525050565b600081519050919050565b600082825260208201905092915050565b60005b838110156117f25780820151818401526020810190506117d7565b60008484015250505050565b6000601f19601f8301169050919050565b600061181a826117b8565b61182481856117c3565b93506118348185602086016117d4565b61183d816117fe565b840191505092915050565b600060608201905081810360008301526118628186611734565b905061187160208301856117a9565b8181036040830152611883818461180f565b9050949350505050565b600081905092915050565b60006118a3826117b8565b6118ad818561188d565b93506118bd8185602086016117d4565b80840191505092915050565b60006118d58284611898565b915081905092915050565b600081519050919050565b600082825260208201905092915050565b6000611907826118e0565b61191181856118eb565b93506119218185602086016117d4565b61192a816117fe565b840191505092915050565b6000602082019050818103600083015261194f81846118fc565b905092915050565b6000819050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061199b82611957565b91506119a683611957565b92508282039050818111156119be576119bd611961565b5b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603160045260246000fdfea26469706673582212201059168c3560f7805d421e35eb34394aee65ad7aa329e268e917797bee902ae964736f6c63430008110033",
  "deployedBytecode": "",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}