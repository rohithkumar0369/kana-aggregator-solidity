/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";

export declare namespace IKana {
  export type BridgeDataStruct = {
    transactionId: PromiseOrValue<BytesLike>;
    bridge: PromiseOrValue<string>;
    integrator: PromiseOrValue<string>;
    referrer: PromiseOrValue<string>;
    sendingAssetId: PromiseOrValue<string>;
    receiver: PromiseOrValue<BytesLike>;
    minAmount: PromiseOrValue<BigNumberish>;
    destinationChainId: PromiseOrValue<BigNumberish>;
    hasSourceSwaps: PromiseOrValue<boolean>;
    hasDestinationCall: PromiseOrValue<boolean>;
  };

  export type BridgeDataStructOutput = [
    string,
    string,
    string,
    string,
    string,
    string,
    BigNumber,
    BigNumber,
    boolean,
    boolean
  ] & {
    transactionId: string;
    bridge: string;
    integrator: string;
    referrer: string;
    sendingAssetId: string;
    receiver: string;
    minAmount: BigNumber;
    destinationChainId: BigNumber;
    hasSourceSwaps: boolean;
    hasDestinationCall: boolean;
  };
}

export declare namespace LayerZeroFacet {
  export type LzDataStruct = {
    toAddress: PromiseOrValue<BytesLike>;
    minAmountLD: PromiseOrValue<BigNumberish>;
    lzFee: PromiseOrValue<BigNumberish>;
    refundAddress: PromiseOrValue<string>;
  };

  export type LzDataStructOutput = [string, BigNumber, BigNumber, string] & {
    toAddress: string;
    minAmountLD: BigNumber;
    lzFee: BigNumber;
    refundAddress: string;
  };
}

export declare namespace LibSwap {
  export type SwapDataStruct = {
    callTo: PromiseOrValue<string>;
    approveTo: PromiseOrValue<string>;
    sendingAssetId: PromiseOrValue<string>;
    receivingAssetId: PromiseOrValue<string>;
    fromAmount: PromiseOrValue<BigNumberish>;
    callData: PromiseOrValue<BytesLike>;
    requiresDeposit: PromiseOrValue<boolean>;
  };

  export type SwapDataStructOutput = [
    string,
    string,
    string,
    string,
    BigNumber,
    string,
    boolean
  ] & {
    callTo: string;
    approveTo: string;
    sendingAssetId: string;
    receivingAssetId: string;
    fromAmount: BigNumber;
    callData: string;
    requiresDeposit: boolean;
  };
}

export interface LayerZeroFacetInterface extends utils.Interface {
  functions: {
    "PT_SEND()": FunctionFragment;
    "startBridgeTokensViaLayerZeroBridge((bytes32,string,string,address,address,bytes32,uint256,uint256,bool,bool),(bytes,uint256,uint256,address))": FunctionFragment;
    "swapAndStartBridgeTokensViaOmniBridge((bytes32,string,string,address,address,bytes32,uint256,uint256,bool,bool),(address,address,address,address,uint256,bytes,bool)[])": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "PT_SEND"
      | "startBridgeTokensViaLayerZeroBridge"
      | "swapAndStartBridgeTokensViaOmniBridge"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "PT_SEND", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "startBridgeTokensViaLayerZeroBridge",
    values: [IKana.BridgeDataStruct, LayerZeroFacet.LzDataStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "swapAndStartBridgeTokensViaOmniBridge",
    values: [IKana.BridgeDataStruct, LibSwap.SwapDataStruct[]]
  ): string;

  decodeFunctionResult(functionFragment: "PT_SEND", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "startBridgeTokensViaLayerZeroBridge",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "swapAndStartBridgeTokensViaOmniBridge",
    data: BytesLike
  ): Result;

  events: {
    "KanaTransferCompleted(bytes32,address,address,uint256,uint256)": EventFragment;
    "KanaTransferStarted(tuple)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "KanaTransferCompleted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "KanaTransferStarted"): EventFragment;
}

export interface KanaTransferCompletedEventObject {
  transactionId: string;
  receivingAssetId: string;
  receiver: string;
  amount: BigNumber;
  timestamp: BigNumber;
}
export type KanaTransferCompletedEvent = TypedEvent<
  [string, string, string, BigNumber, BigNumber],
  KanaTransferCompletedEventObject
>;

export type KanaTransferCompletedEventFilter =
  TypedEventFilter<KanaTransferCompletedEvent>;

export interface KanaTransferStartedEventObject {
  bridgeData: IKana.BridgeDataStructOutput;
}
export type KanaTransferStartedEvent = TypedEvent<
  [IKana.BridgeDataStructOutput],
  KanaTransferStartedEventObject
>;

export type KanaTransferStartedEventFilter =
  TypedEventFilter<KanaTransferStartedEvent>;

export interface LayerZeroFacet extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: LayerZeroFacetInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    PT_SEND(overrides?: CallOverrides): Promise<[number]>;

    startBridgeTokensViaLayerZeroBridge(
      _bridgeData: IKana.BridgeDataStruct,
      _lzData: LayerZeroFacet.LzDataStruct,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    swapAndStartBridgeTokensViaOmniBridge(
      _bridgeData: IKana.BridgeDataStruct,
      _swapData: LibSwap.SwapDataStruct[],
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  PT_SEND(overrides?: CallOverrides): Promise<number>;

  startBridgeTokensViaLayerZeroBridge(
    _bridgeData: IKana.BridgeDataStruct,
    _lzData: LayerZeroFacet.LzDataStruct,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  swapAndStartBridgeTokensViaOmniBridge(
    _bridgeData: IKana.BridgeDataStruct,
    _swapData: LibSwap.SwapDataStruct[],
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    PT_SEND(overrides?: CallOverrides): Promise<number>;

    startBridgeTokensViaLayerZeroBridge(
      _bridgeData: IKana.BridgeDataStruct,
      _lzData: LayerZeroFacet.LzDataStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    swapAndStartBridgeTokensViaOmniBridge(
      _bridgeData: IKana.BridgeDataStruct,
      _swapData: LibSwap.SwapDataStruct[],
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "KanaTransferCompleted(bytes32,address,address,uint256,uint256)"(
      transactionId?: PromiseOrValue<BytesLike> | null,
      receivingAssetId?: null,
      receiver?: null,
      amount?: null,
      timestamp?: null
    ): KanaTransferCompletedEventFilter;
    KanaTransferCompleted(
      transactionId?: PromiseOrValue<BytesLike> | null,
      receivingAssetId?: null,
      receiver?: null,
      amount?: null,
      timestamp?: null
    ): KanaTransferCompletedEventFilter;

    "KanaTransferStarted(tuple)"(
      bridgeData?: null
    ): KanaTransferStartedEventFilter;
    KanaTransferStarted(bridgeData?: null): KanaTransferStartedEventFilter;
  };

  estimateGas: {
    PT_SEND(overrides?: CallOverrides): Promise<BigNumber>;

    startBridgeTokensViaLayerZeroBridge(
      _bridgeData: IKana.BridgeDataStruct,
      _lzData: LayerZeroFacet.LzDataStruct,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    swapAndStartBridgeTokensViaOmniBridge(
      _bridgeData: IKana.BridgeDataStruct,
      _swapData: LibSwap.SwapDataStruct[],
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    PT_SEND(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    startBridgeTokensViaLayerZeroBridge(
      _bridgeData: IKana.BridgeDataStruct,
      _lzData: LayerZeroFacet.LzDataStruct,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    swapAndStartBridgeTokensViaOmniBridge(
      _bridgeData: IKana.BridgeDataStruct,
      _swapData: LibSwap.SwapDataStruct[],
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
