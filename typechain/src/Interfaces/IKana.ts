/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  Signer,
  utils,
} from "ethers";
import type { EventFragment } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";

export declare namespace IKana {
  export type BridgeDataStruct = {
    transactionId: PromiseOrValue<BytesLike>;
    bridge: PromiseOrValue<string>;
    integrator: PromiseOrValue<string>;
    referrer: PromiseOrValue<string>;
    sendingAssetId: PromiseOrValue<string>;
    receiver: PromiseOrValue<BytesLike>;
    minAmount: PromiseOrValue<BigNumberish>;
    destinationChainId: PromiseOrValue<BigNumberish>;
    hasSourceSwaps: PromiseOrValue<boolean>;
    hasDestinationCall: PromiseOrValue<boolean>;
  };

  export type BridgeDataStructOutput = [
    string,
    string,
    string,
    string,
    string,
    string,
    BigNumber,
    BigNumber,
    boolean,
    boolean
  ] & {
    transactionId: string;
    bridge: string;
    integrator: string;
    referrer: string;
    sendingAssetId: string;
    receiver: string;
    minAmount: BigNumber;
    destinationChainId: BigNumber;
    hasSourceSwaps: boolean;
    hasDestinationCall: boolean;
  };
}

export interface IKanaInterface extends utils.Interface {
  functions: {};

  events: {
    "KanaTransferCompleted(bytes32,address,address,uint256,uint256)": EventFragment;
    "KanaTransferStarted(tuple)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "KanaTransferCompleted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "KanaTransferStarted"): EventFragment;
}

export interface KanaTransferCompletedEventObject {
  transactionId: string;
  receivingAssetId: string;
  receiver: string;
  amount: BigNumber;
  timestamp: BigNumber;
}
export type KanaTransferCompletedEvent = TypedEvent<
  [string, string, string, BigNumber, BigNumber],
  KanaTransferCompletedEventObject
>;

export type KanaTransferCompletedEventFilter =
  TypedEventFilter<KanaTransferCompletedEvent>;

export interface KanaTransferStartedEventObject {
  bridgeData: IKana.BridgeDataStructOutput;
}
export type KanaTransferStartedEvent = TypedEvent<
  [IKana.BridgeDataStructOutput],
  KanaTransferStartedEventObject
>;

export type KanaTransferStartedEventFilter =
  TypedEventFilter<KanaTransferStartedEvent>;

export interface IKana extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IKanaInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {};

  callStatic: {};

  filters: {
    "KanaTransferCompleted(bytes32,address,address,uint256,uint256)"(
      transactionId?: PromiseOrValue<BytesLike> | null,
      receivingAssetId?: null,
      receiver?: null,
      amount?: null,
      timestamp?: null
    ): KanaTransferCompletedEventFilter;
    KanaTransferCompleted(
      transactionId?: PromiseOrValue<BytesLike> | null,
      receivingAssetId?: null,
      receiver?: null,
      amount?: null,
      timestamp?: null
    ): KanaTransferCompletedEventFilter;

    "KanaTransferStarted(tuple)"(
      bridgeData?: null
    ): KanaTransferStartedEventFilter;
    KanaTransferStarted(bridgeData?: null): KanaTransferStartedEventFilter;
  };

  estimateGas: {};

  populateTransaction: {};
}
