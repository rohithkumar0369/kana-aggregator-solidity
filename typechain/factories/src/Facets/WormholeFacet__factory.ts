/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../common";
import type {
  WormholeFacet,
  WormholeFacetInterface,
} from "../../../src/Facets/WormholeFacet";

const _abi = [
  {
    inputs: [
      {
        internalType: "contract IWormholeRouter",
        name: "_router",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [],
    name: "InformationMismatch",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "required",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "balance",
        type: "uint256",
      },
    ],
    name: "InsufficientBalance",
    type: "error",
  },
  {
    inputs: [],
    name: "InvalidAmount",
    type: "error",
  },
  {
    inputs: [],
    name: "NativeAssetTransferFailed",
    type: "error",
  },
  {
    inputs: [],
    name: "NoTransferToNullAddress",
    type: "error",
  },
  {
    inputs: [],
    name: "NullAddrIsNotAValidSpender",
    type: "error",
  },
  {
    inputs: [],
    name: "NullAddrIsNotAnERC20Token",
    type: "error",
  },
  {
    inputs: [],
    name: "ReentrancyError",
    type: "error",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "bytes32",
        name: "transactionId",
        type: "bytes32",
      },
      {
        indexed: false,
        internalType: "address",
        name: "receivingAssetId",
        type: "address",
      },
      {
        indexed: false,
        internalType: "address",
        name: "receiver",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "timestamp",
        type: "uint256",
      },
    ],
    name: "KanaTransferCompleted",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        components: [
          {
            internalType: "bytes32",
            name: "transactionId",
            type: "bytes32",
          },
          {
            internalType: "string",
            name: "bridge",
            type: "string",
          },
          {
            internalType: "string",
            name: "integrator",
            type: "string",
          },
          {
            internalType: "address",
            name: "referrer",
            type: "address",
          },
          {
            internalType: "address",
            name: "sendingAssetId",
            type: "address",
          },
          {
            internalType: "bytes32",
            name: "receiver",
            type: "bytes32",
          },
          {
            internalType: "uint256",
            name: "minAmount",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "destinationChainId",
            type: "uint256",
          },
          {
            internalType: "bool",
            name: "hasSourceSwaps",
            type: "bool",
          },
          {
            internalType: "bool",
            name: "hasDestinationCall",
            type: "bool",
          },
        ],
        indexed: false,
        internalType: "struct IKana.BridgeData",
        name: "bridgeData",
        type: "tuple",
      },
    ],
    name: "KanaTransferStarted",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "uint256",
        name: "lifiChainId",
        type: "uint256",
      },
      {
        indexed: true,
        internalType: "uint256",
        name: "wormholeChainId",
        type: "uint256",
      },
    ],
    name: "WormholeChainIdMapped",
    type: "event",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "bytes32",
            name: "transactionId",
            type: "bytes32",
          },
          {
            internalType: "string",
            name: "bridge",
            type: "string",
          },
          {
            internalType: "string",
            name: "integrator",
            type: "string",
          },
          {
            internalType: "address",
            name: "referrer",
            type: "address",
          },
          {
            internalType: "address",
            name: "sendingAssetId",
            type: "address",
          },
          {
            internalType: "bytes32",
            name: "receiver",
            type: "bytes32",
          },
          {
            internalType: "uint256",
            name: "minAmount",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "destinationChainId",
            type: "uint256",
          },
          {
            internalType: "bool",
            name: "hasSourceSwaps",
            type: "bool",
          },
          {
            internalType: "bool",
            name: "hasDestinationCall",
            type: "bool",
          },
        ],
        internalType: "struct IKana.BridgeData",
        name: "_bridgeData",
        type: "tuple",
      },
      {
        components: [
          {
            internalType: "uint256",
            name: "arbiterFee",
            type: "uint256",
          },
          {
            internalType: "uint32",
            name: "nonce",
            type: "uint32",
          },
        ],
        internalType: "struct WormholeFacet.WormholeData",
        name: "_wormholeData",
        type: "tuple",
      },
    ],
    name: "startBridgeTokensViaWormhole",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x60a060405234801561001057600080fd5b5060405161115138038061115183398101604081905261002f91610040565b6001600160a01b0316608052610070565b60006020828403121561005257600080fd5b81516001600160a01b038116811461006957600080fd5b9392505050565b6080516110b861009960003960008181610269015281816102bd015261037d01526110b86000f3fe60806040526004361061001e5760003560e01c806336adacab14610023575b600080fd5b610036610031366004610d59565b610038565b005b3360006100453447610e87565b9050838061010001511561006c57604051631437241760e21b815260040160405180910390fd5b848061012001511561009157604051631437241760e21b815260040160405180910390fd5b858060c001516000036100b75760405163162908e360e11b815260040160405180910390fd5b7fa65bb2f450488ab0858c00edc14abc5297769bf42adb48cfb77752890e8b697b8054600019016100fb576040516329f745a760e01b815260040160405180910390fd5b60018155608088015160c0890151610113919061015d565b61011d888861025f565b600090819055479350915050828211610137576000610141565b6101418383610e87565b9050801561015557610155600085836104a5565b505050505050565b6001600160a01b038216610190578034101561018c5760405163162908e360e11b815260040160405180910390fd5b5050565b806000036101b15760405163162908e360e11b815260040160405180910390fd5b6040516370a0823160e01b81523360048201526000906001600160a01b038416906370a0823190602401602060405180830381865afa1580156101f8573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061021c9190610ea0565b90508181101561024e5760405163cf47918160e01b815260048101839052602481018290526044015b60405180910390fd5b61025a833330856104c9565b505050565b61029282608001517f00000000000000000000000000000000000000000000000000000000000000008460c0015161062a565b60808201516001600160a01b031661037b5760c082015160e083015160a08401516001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001692639981509f92909185356102f86040880160208901610eb9565b6040516001600160e01b031960e088901b16815261ffff90941660048501526024840192909252604483015263ffffffff16606482015260840160206040518083038185885af1158015610350573d6000803e3d6000fd5b50505050506040513d601f19601f820116820180604052508101906103759190610ee6565b5061046a565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316630f5287b083608001518460c001518560e001518660a0015186600001358760200160208101906103d69190610eb9565b6040516001600160e01b031960e089901b1681526001600160a01b039096166004870152602486019490945261ffff90921660448501526064840152608483015263ffffffff1660a482015260c4016020604051808303816000875af1158015610444573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104689190610ee6565b505b7f8682d29e0b6b94ba6861fb70f7c5cf544a4b691f0d0281b97e7d9e958fbfa30c826040516104999190610f60565b60405180910390a15050565b6001600160a01b038316156104bf5761025a8383836106fe565b61025a82826107c8565b6001600160a01b0384166104f05760405163346fafc360e21b815260040160405180910390fd5b6001600160a01b038216610517576040516321f7434560e01b815260040160405180910390fd5b6040516370a0823160e01b81526001600160a01b03838116600483015285916000918316906370a0823190602401602060405180830381865afa158015610562573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105869190610ea0565b90506105948286868661088d565b6040516370a0823160e01b81526001600160a01b038581166004830152849183918516906370a0823190602401602060405180830381865afa1580156105de573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106029190610ea0565b61060c9190610e87565b146101555760405163162908e360e11b815260040160405180910390fd5b6001600160a01b03831661063d57505050565b6001600160a01b038216610664576040516363ba9bff60e01b815260040160405180910390fd5b604051636eb1769f60e11b81523060048201526001600160a01b0383811660248301526000919085169063dd62ed3e90604401602060405180830381865afa1580156106b4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106d89190610ea0565b9050818110156106f8576106f884846106f384600019610e87565b6108f8565b50505050565b6001600160a01b0383166107255760405163346fafc360e21b815260040160405180910390fd5b6040516370a0823160e01b81523060048201526000906001600160a01b038516906370a0823190602401602060405180830381865afa15801561076c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107909190610ea0565b9050808211156107bd5760405163cf47918160e01b81526004810183905260248101829052604401610245565b6106f88484846109aa565b6001600160a01b0382166107ef576040516321f7434560e01b815260040160405180910390fd5b478111156108195760405163cf47918160e01b815260048101829052476024820152604401610245565b6000826001600160a01b03168260405160006040518083038185875af1925050503d8060008114610866576040519150601f19603f3d011682016040523d82523d6000602084013e61086b565b606091505b505090508061025a57604051635a04673760e01b815260040160405180910390fd5b6040516001600160a01b03808516602483015283166044820152606481018290526106f89085906323b872dd60e01b906084015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b0319909316929092179091526109da565b604051636eb1769f60e11b81523060048201526001600160a01b038381166024830152600091839186169063dd62ed3e90604401602060405180830381865afa158015610949573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061096d9190610ea0565b6109779190611023565b6040516001600160a01b0385166024820152604481018290529091506106f890859063095ea7b360e01b906064016108c1565b6040516001600160a01b03831660248201526044810182905261025a90849063a9059cbb60e01b906064016108c1565b6000610a2f826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316610aac9092919063ffffffff16565b80519091501561025a5780806020019051810190610a4d9190611036565b61025a5760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608401610245565b6060610abb8484600085610ac3565b949350505050565b606082471015610b245760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b6064820152608401610245565b600080866001600160a01b03168587604051610b409190611053565b60006040518083038185875af1925050503d8060008114610b7d576040519150601f19603f3d011682016040523d82523d6000602084013e610b82565b606091505b5091509150610b9387838387610b9e565b979650505050505050565b60608315610c0d578251600003610c06576001600160a01b0385163b610c065760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610245565b5081610abb565b610abb8383815115610c225781518083602001fd5b8060405162461bcd60e51b8152600401610245919061106f565b634e487b7160e01b600052604160045260246000fd5b604051610140810167ffffffffffffffff81118282101715610c7657610c76610c3c565b60405290565b600082601f830112610c8d57600080fd5b813567ffffffffffffffff80821115610ca857610ca8610c3c565b604051601f8301601f19908116603f01168101908282118183101715610cd057610cd0610c3c565b81604052838152866020858801011115610ce957600080fd5b836020870160208301376000602085830101528094505050505092915050565b80356001600160a01b0381168114610d2057600080fd5b919050565b8015158114610d3357600080fd5b50565b8035610d2081610d25565b600060408284031215610d5357600080fd5b50919050565b60008060608385031215610d6c57600080fd5b823567ffffffffffffffff80821115610d8457600080fd5b908401906101408287031215610d9957600080fd5b610da1610c52565b82358152602083013582811115610db757600080fd5b610dc388828601610c7c565b602083015250604083013582811115610ddb57600080fd5b610de788828601610c7c565b604083015250610df960608401610d09565b6060820152610e0a60808401610d09565b608082015260a083013560a082015260c083013560c082015260e083013560e08201526101009150610e3d828401610d36565b828201526101209150610e51828401610d36565b82820152809450505050610e688460208501610d41565b90509250929050565b634e487b7160e01b600052601160045260246000fd5b81810381811115610e9a57610e9a610e71565b92915050565b600060208284031215610eb257600080fd5b5051919050565b600060208284031215610ecb57600080fd5b813563ffffffff81168114610edf57600080fd5b9392505050565b600060208284031215610ef857600080fd5b815167ffffffffffffffff81168114610edf57600080fd5b60005b83811015610f2b578181015183820152602001610f13565b50506000910152565b60008151808452610f4c816020860160208601610f10565b601f01601f19169290920160200192915050565b602081528151602082015260006020830151610140806040850152610f89610160850183610f34565b91506040850151601f19858403016060860152610fa68382610f34565b9250506060850151610fc360808601826001600160a01b03169052565b5060808501516001600160a01b03811660a08601525060a085015160c085015260c085015160e085015260e08501516101008181870152808701519150506101206110118187018315159052565b90950151151593019290925250919050565b80820180821115610e9a57610e9a610e71565b60006020828403121561104857600080fd5b8151610edf81610d25565b60008251611065818460208701610f10565b9190910192915050565b602081526000610edf6020830184610f3456fea264697066735822122036c2320219959e98310b386fb2ab057aa9e4004675dccaefee9cbe3600217fb464736f6c63430008110033";

type WormholeFacetConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: WormholeFacetConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class WormholeFacet__factory extends ContractFactory {
  constructor(...args: WormholeFacetConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    _router: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<WormholeFacet> {
    return super.deploy(_router, overrides || {}) as Promise<WormholeFacet>;
  }
  override getDeployTransaction(
    _router: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(_router, overrides || {});
  }
  override attach(address: string): WormholeFacet {
    return super.attach(address) as WormholeFacet;
  }
  override connect(signer: Signer): WormholeFacet__factory {
    return super.connect(signer) as WormholeFacet__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): WormholeFacetInterface {
    return new utils.Interface(_abi) as WormholeFacetInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): WormholeFacet {
    return new Contract(address, _abi, signerOrProvider) as WormholeFacet;
  }
}
