/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../common";
import type {
  DexManagerFacet,
  DexManagerFacetInterface,
} from "../../../src/Facets/DexManagerFacet";

const _abi = [
  {
    inputs: [],
    name: "CannotAuthoriseSelf",
    type: "error",
  },
  {
    inputs: [],
    name: "InvalidContract",
    type: "error",
  },
  {
    inputs: [],
    name: "UnAuthorized",
    type: "error",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "dexAddress",
        type: "address",
      },
    ],
    name: "DexAdded",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "dexAddress",
        type: "address",
      },
    ],
    name: "DexRemoved",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "bytes4",
        name: "functionSignature",
        type: "bytes4",
      },
      {
        indexed: true,
        internalType: "bool",
        name: "approved",
        type: "bool",
      },
    ],
    name: "FunctionSignatureApprovalChanged",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_dex",
        type: "address",
      },
    ],
    name: "addDex",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "approvedDexs",
    outputs: [
      {
        internalType: "address[]",
        name: "addresses",
        type: "address[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address[]",
        name: "_dexs",
        type: "address[]",
      },
    ],
    name: "batchAddDex",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address[]",
        name: "_dexs",
        type: "address[]",
      },
    ],
    name: "batchRemoveDex",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes4[]",
        name: "_signatures",
        type: "bytes4[]",
      },
      {
        internalType: "bool",
        name: "_approval",
        type: "bool",
      },
    ],
    name: "batchSetFunctionApprovalBySignature",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes4",
        name: "_signature",
        type: "bytes4",
      },
    ],
    name: "isFunctionApproved",
    outputs: [
      {
        internalType: "bool",
        name: "approved",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_dex",
        type: "address",
      },
    ],
    name: "removeDex",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes4",
        name: "_signature",
        type: "bytes4",
      },
      {
        internalType: "bool",
        name: "_approval",
        type: "bool",
      },
    ],
    name: "setFunctionApprovalBySignature",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b50610cbe806100206000396000f3fe608060405234801561001057600080fd5b50600436106100885760003560e01c80639afc19c71161005b5780639afc19c7146100f0578063c3a6a96b14610103578063fbb2d38114610116578063fcd8e49e1461012b57600080fd5b8063124f1ead1461008d5780632d2506a9146100a257806344e2b18c146100ca578063536db266146100dd575b600080fd5b6100a061009b3660046109d2565b61013e565b005b6100b56100b0366004610a1f565b6101a6565b60405190151581526020015b60405180910390f35b6100a06100d8366004610a96565b6101e9565b6100a06100eb3660046109d2565b6102d6565b6100a06100fe366004610aea565b610367565b6100a0610111366004610b2c565b610434565b61011e6104b6565b6040516100c19190610b5f565b6100a0610139366004610aea565b6104c5565b6101466105c7565b6001600160a01b0316336001600160a01b031614610166576101666105f5565b61016f81610664565b6040516001600160a01b038216907f78e0a2ffcdfbbb49ba5c8050d8630fab2176d825e8360809db049cd98f462a7890600090a250565b6001600160e01b0319811660009081527fbcebf0a9ab66af8ebd1c7c5806111adc185225ddfcbffe27e46ed5ac66b89049602052604081205460ff165b92915050565b6102116040518060400160405280600781526020016663616c6c696e6760c81b8152506107c7565b6102196105c7565b6001600160a01b0316336001600160a01b031614610239576102396105f5565b8160005b818110156102cf57600085858381811061025957610259610bac565b905060200201602081019061026e9190610a1f565b905083156102845761027f8161080a565b61028d565b61028d8161084c565b604051841515906001600160e01b03198316907f9167f6a23d52a4522e9211205d62ce63f02d928227ae0fe00326f51e152a3c4590600090a35060010161023d565b5050505050565b6102de6105c7565b6001600160a01b0316336001600160a01b0316146102fe576102fe6105f5565b306001600160a01b03821603610327576040516354e77e5760e11b815260040160405180910390fd5b61033081610862565b6040516001600160a01b038216907f7e0058dd0cbc0a8b7beaa013a4825655d8e9e81a5e2cc6582818deded0a41b9990600090a250565b61036f6105c7565b6001600160a01b0316336001600160a01b03161461038f5761038f6105f5565b8060005b8181101561042e576103ca8484838181106103b0576103b0610bac565b90506020020160208101906103c591906109d2565b610664565b8383828181106103dc576103dc610bac565b90506020020160208101906103f191906109d2565b6001600160a01b03167f78e0a2ffcdfbbb49ba5c8050d8630fab2176d825e8360809db049cd98f462a7860405160405180910390a2600101610393565b50505050565b61043c6105c7565b6001600160a01b0316336001600160a01b03161461045c5761045c6105f5565b80156104705761046b8261080a565b610479565b6104798261084c565b604051811515906001600160e01b03198416907f9167f6a23d52a4522e9211205d62ce63f02d928227ae0fe00326f51e152a3c4590600090a35050565b60606104c06108ed565b905090565b6104cd6105c7565b6001600160a01b0316336001600160a01b0316146104ed576104ed6105f5565b8060005b8181101561042e57600084848381811061050d5761050d610bac565b905060200201602081019061052291906109d2565b9050306001600160a01b0382160361054d576040516354e77e5760e11b815260040160405180910390fd5b6001600160a01b0381166000908152600080516020610c69833981519152602052604090205460ff161561058157506104f1565b61058a81610862565b6040516001600160a01b038216907f7e0058dd0cbc0a8b7beaa013a4825655d8e9e81a5e2cc6582818deded0a41b9990600090a2506001016104f1565b7fc8fcad8db84d3cc18b4c41d551ea0ee66dd599cde068d998e57d5e09332c1320546001600160a01b031690565b600080356001600160e01b03191681527f2f67df2c8ea98878b27d45fa54c0be4d9d8154fefc089eb664599d68f8dc88a96020818152604080842033855290915290912054600160ff9091161515146106615760405163be24598360e01b815260040160405180910390fd5b50565b6001600160a01b0381166000908152600080516020610c69833981519152602081905260409091205460ff16610698575050565b6001600160a01b0382166000908152602082905260408120805460ff191690556002820154905b8181101561042e57836001600160a01b03168360020182815481106106e6576106e6610bac565b6000918252602090912001546001600160a01b0316036107b5576002830161070f600184610bd8565b8154811061071f5761071f610bac565b6000918252602090912001546002840180546001600160a01b03909216918390811061074d5761074d610bac565b9060005260206000200160006101000a8154816001600160a01b0302191690836001600160a01b031602179055508260020180548061078e5761078e610beb565b600082815260209020810160001990810180546001600160a01b031916905501905561042e565b806107bf81610c01565b9150506106bf565b610661816040516024016107db9190610c1a565b60408051601f198184030181529190526020810180516001600160e01b031663104c13eb60e21b17905261095f565b6001600080516020610c698339815191525b6001600160e01b031992909216600090815260019092016020526040909120805460ff1916911515919091179055565b6000600080516020610c6983398151915261081c565b61086b81610980565b6001600160a01b0381166000908152600080516020610c69833981519152602081905260409091205460ff16156108a0575050565b6001600160a01b039091166000818152602083815260408220805460ff191660019081179091556002909401805494850181558252902090910180546001600160a01b0319169091179055565b6060600080516020610c6983398151915260020180548060200260200160405190810160405280929190818152602001828054801561095557602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311610937575b5050505050905090565b80516a636f6e736f6c652e6c6f67602083016000808483855afa5050505050565b6001600160a01b0381166109a7576040516303777f6960e51b815260040160405180910390fd5b806001600160a01b03163b600003610661576040516303777f6960e51b815260040160405180910390fd5b6000602082840312156109e457600080fd5b81356001600160a01b03811681146109fb57600080fd5b9392505050565b80356001600160e01b031981168114610a1a57600080fd5b919050565b600060208284031215610a3157600080fd5b6109fb82610a02565b60008083601f840112610a4c57600080fd5b50813567ffffffffffffffff811115610a6457600080fd5b6020830191508360208260051b8501011115610a7f57600080fd5b9250929050565b80358015158114610a1a57600080fd5b600080600060408486031215610aab57600080fd5b833567ffffffffffffffff811115610ac257600080fd5b610ace86828701610a3a565b9094509250610ae1905060208501610a86565b90509250925092565b60008060208385031215610afd57600080fd5b823567ffffffffffffffff811115610b1457600080fd5b610b2085828601610a3a565b90969095509350505050565b60008060408385031215610b3f57600080fd5b610b4883610a02565b9150610b5660208401610a86565b90509250929050565b6020808252825182820181905260009190848201906040850190845b81811015610ba05783516001600160a01b031683529284019291840191600101610b7b565b50909695505050505050565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b818103818111156101e3576101e3610bc2565b634e487b7160e01b600052603160045260246000fd5b600060018201610c1357610c13610bc2565b5060010190565b600060208083528351808285015260005b81811015610c4757858101830151858201604001528201610c2b565b506000604082860101526040601f19601f830116850101925050509291505056febcebf0a9ab66af8ebd1c7c5806111adc185225ddfcbffe27e46ed5ac66b89048a26469706673582212206dc5c94270cbf0e6b623f358b789d1ebe6a9060ed67d523cf16500e79ef36ca564736f6c63430008110033";

type DexManagerFacetConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: DexManagerFacetConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class DexManagerFacet__factory extends ContractFactory {
  constructor(...args: DexManagerFacetConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<DexManagerFacet> {
    return super.deploy(overrides || {}) as Promise<DexManagerFacet>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): DexManagerFacet {
    return super.attach(address) as DexManagerFacet;
  }
  override connect(signer: Signer): DexManagerFacet__factory {
    return super.connect(signer) as DexManagerFacet__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): DexManagerFacetInterface {
    return new utils.Interface(_abi) as DexManagerFacetInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): DexManagerFacet {
    return new Contract(address, _abi, signerOrProvider) as DexManagerFacet;
  }
}
